<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MM.Helper</name>
    </assembly>
    <members>
        <member name="T:MM.Helper.AI.Word">
            <summary>
            分词帮助类
            </summary>
        </member>
        <member name="T:MM.Helper.Base.Arr">
            <summary>
            数组帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Arr.Except``1(``0[],``0[])">
            <summary>
            差集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回合并结果</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Intersect``1(``0[],``0[])">
            <summary>
            交集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回新列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Union``1(``0[],``0[])">
            <summary>
            并集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回新列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Except``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            差集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回合并结果</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Intersect``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            交集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回新列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Union``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            并集
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>返回新列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.GetStr``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.GetInt``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Sum``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.GetValues``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Get``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.GetFirst``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            获取值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Set``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            设置值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>返回所有对应键值</returns>s
        </member>
        <member name="M:MM.Helper.Base.Arr.SetFirst``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            设置值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Del``1(System.Collections.Generic.List{``0},System.String,System.Object)">
            <summary>
            删除值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.DelFirst``1(System.Collections.Generic.List{``0},System.String,System.Object)">
            <summary>
            删除值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.AddOrSet``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            添加或修改
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Add``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            追加对象（通过列表方式）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">当前列表</param>
            <param name="list_new">追加列表</param>
        </member>
        <member name="M:MM.Helper.Base.Arr.Has``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            判断值是否已存在
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            拆分数组
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表或数组</param>
            <param name="size">查分大小</param>
            <returns>返回二维数组</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取前几个成员
            </summary>
            <param name="list">列表1</param>
            <param name="num">获取数</param>
            <returns>返回交集列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.ToStr``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            转字符串
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Arr.Split(System.String,System.String)">
            <summary>
            分割数组
            </summary>
            <param name="str">字符串</param>
            <param name="symbol">分隔符</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            分割数组
            </summary>
            <param name="list">列表</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Arr.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            取成员数
            </summary>
            <param name="list">列表</param>
            <returns>返回成员数</returns>
        </member>
        <member name="T:MM.Helper.Base.Colour">
            <summary>
            颜色帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Colour.Rand(System.String)">
            <summary>
            随机色
            </summary>
            <param name="colour">色系 亮色/暗色（light/dark） 红色/绿色/蓝色（red/green/blue）</param>
            <returns>返回颜色值</returns>
        </member>
        <member name="M:MM.Helper.Base.Colour.ToHx16(System.Int32,System.Int32,System.Int32)">
            <summary>
            RGB转16进制色值
            </summary>
            <param name="Red">红色值，范围0-255</param>
            <param name="Green">绿色值，范围0-255</param>
            <param name="Blue">蓝色值，范围0-255</param>
            <returns>返回16进制色值</returns>
        </member>
        <member name="M:MM.Helper.Base.Colour.ToRGB(System.String)">
            <summary>
            16进制颜色值转RBG
            </summary>
            <param name="value">16进制颜色值</param>
            <returns>返回RGB模型</returns>
        </member>
        <member name="T:MM.Helper.Base.RGB">
            <summary>
            RGB模型
            </summary>
        </member>
        <member name="P:MM.Helper.Base.RGB.R">
            <summary>
            红色值
            </summary>
        </member>
        <member name="P:MM.Helper.Base.RGB.G">
            <summary>
            绿色值
            </summary>
        </member>
        <member name="P:MM.Helper.Base.RGB.B">
            <summary>
            蓝色值
            </summary>
        </member>
        <member name="T:MM.Helper.Base.Dict">
            <summary>
            字典帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Dict.Left``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            左合并
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict">字典1</param>
            <param name="dictB">字典2</param>
        </member>
        <member name="M:MM.Helper.Base.Dict.GetKeys``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            获取键列表
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dt">字典</param>
            <returns>返回键列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Dict.Right``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            右合并 —— 返回右边所有及左边独有的
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict">字典1</param>
            <param name="dictB">字典2</param>
        </member>
        <member name="M:MM.Helper.Base.Dict.Has``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            判断键是否存在
            </summary>
            <typeparam name="T">返回</typeparam>
            <param name="dict1">字典</param>
            <param name="key">键</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Dict.AddOrSet``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,``0)">
            <summary>
            添加或修改
            </summary>
            <typeparam name="T">返回</typeparam>
            <param name="dict1">字典</param>
            <param name="key">键</param>
            <param name="m">值</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Dict.Get``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dt">字典</param>
            <param name="key">键</param>
            <returns>返回值</returns>
        </member>
        <member name="T:MM.Helper.Base.Encode">
            <summary>
            编码帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Encode.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.HtmlEncode(System.String)">
            <summary>
            Html编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.HtmlDecode(System.String)">
            <summary>
            Html解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.Utf8Encode(System.String)">
            <summary>
            Utf8编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.Utf8Decode(System.String)">
            <summary>
            Utf8解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.UnicodeEncode(System.String)">
            <summary>
            Unicode编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.UnicodeDecode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.AsciiEncode(System.String)">
            <summary>
            ASCII编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.AsciiDecode(System.String)">
            <summary>
            ASCII解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.Base64Encode(System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.Base64Decode(System.String)">
            <summary>
             Base64解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.ToEncode(System.String,System.String,System.String)">
            <summary>
            转换编码方式
            </summary>
            <param name="str">被转码的字符串</param>
            <param name="to_encoding">转换后的编码方式</param>
            <param name="from_encoding">当前的编码方式</param>
            <returns>转码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encode.ToEncode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            转换编码方式
            </summary>
            <param name="str">被转码的字符串</param>
            <param name="to_encoding">转换后的编码方式</param>
            <param name="from_encoding">当前的编码方式</param>
            <returns>转码后的字符串</returns>
        </member>
        <member name="T:MM.Helper.Base.Encrypt">
            <summary>
            加解密帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Base.Encrypt.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.Md5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.EncodeHash(System.String)">
            <summary>
            哈希加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.EncodeSHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.EncodeDES(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="str">被加密的字符串</param>
            <param name="key">密钥</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.DecodeDES(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="str">被解密的字符串</param>
            <param name="key">密钥</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.EncodeBase64(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.DecodeBase64(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="str">被解密的字符串</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.EncodeRSA(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="str">被加密的字符串</param>
            <param name="xmlPubKey">xml公钥</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Encrypt.DecodeRSA(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="str">被解密的字符串</param>
            <param name="xmlKey">xml私钥</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="T:MM.Helper.Base.Num">
            <summary>
            号码帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Base.Num.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Num.ToDecimal(System.String)">
            <summary>
            转小数型
            </summary>
            <param name="str">字符串</param>
            <returns>返回小数型</returns>
        </member>
        <member name="M:MM.Helper.Base.Num.ToInt(System.String)">
            <summary>
            转整型
            </summary>
            <param name="str">字符串</param>
            <returns>返回整型</returns>
        </member>
        <member name="M:MM.Helper.Base.Num.ToLong(System.String)">
            <summary>
            转长整型
            </summary>
            <param name="str">字符串</param>
            <returns>返回长数型</returns>
        </member>
        <member name="M:MM.Helper.Base.Num.ToPoker(System.Int32,System.Boolean)">
            <summary>
            数字转扑克
            </summary>
            <param name="num">数字</param>
            <param name="havaBoss">是否有王牌</param>
            <returns>返回扑克标记字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Num.ToPokerCode(System.Int32)">
            <summary>
            转扑克代号
            </summary>
            <param name="num">数字</param>
            <returns>返回号码代号</returns>
        </member>
        <member name="T:MM.Helper.Base.Obj">
            <summary>
            对象类
            </summary>
        </member>
        <member name="P:MM.Helper.Base.Obj.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Obj.GetType(System.Object)">
            <summary>
            获取对象类型
            </summary>
            <param name="obj">对象</param>
            <returns>返回类型信息模型</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.New(System.String)">
            <summary>
            新建对象
            </summary>
            <param name="typeName">类型</param>
            <returns>返回对象型</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToBool(System.Object)">
            <summary>
            转为布尔型
            </summary>
            <param name="obj">对象</param>
            <returns>返回true/false</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToInt(System.Object)">
            <summary>
            转为数字
            </summary>
            <param name="obj">对象</param>
            <returns>返回数字型</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToObj``1(System.String)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="str">字符串</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToObj``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jToken">Json Token对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToObj``1(Newtonsoft.Json.Linq.JArray)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jarr">json数组</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToObj``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jobj">json对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToObj``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict">字典</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:MM.Helper.Base.Obj.ToDict(System.Object)">
            <summary>
            转为字典
            </summary>
            <param name="obj">对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="T:MM.Helper.Base.Rand">
            <summary>
            随机数帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Base.Rand.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Rand.Int(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的随机整数，该随机数范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
        </member>
        <member name="M:MM.Helper.Base.Rand.Double">
            <summary>
            生成一个0.0到1.0的随机小数
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Rand.Arr``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="arr">需要随机排序的数组</param>
        </member>
        <member name="M:MM.Helper.Base.Rand.ForStr(System.String,System.Int32,System.String)">
            <summary>
            从字符串里随机得到，规定个数的字符串
            </summary>
            <param name="str">全字符</param>
            <param name="length">长度</param>
            <param name="symbol">分隔符</param>
            <returns>返回规定个数字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Num(System.Int32,System.Int32)">
            <summary>
            随机数——指定返回获取随机数
            </summary>
            <param name="min">最小数</param>
            <param name="max">最大数</param>
            <returns>返回一个数字</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Num(System.Int32)">
            <summary>
            置随机数 —— 按长度
            </summary>
            <param name="length">随机数长度</param>
            <returns>返回一个随机数</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Num(System.Int32,System.Boolean)">
            <summary>
            置随机数 —— 按长度
            </summary>
            <param name="length">随机数长度</param>
            <param name="noRepeat">数字是否可重复</param>
            <returns>返回指定长度的随机数</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.NumNoRepeat(System.Int32)">
            <summary>
            无重复随机数
            </summary>
            <param name="count">代码数</param>
            <returns>返回随机数</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.NumAndEn(System.Int32)">
            <summary>
            随机数字和字母
            </summary>
            <param name="length">长度</param>
            <returns>返回随机数字和字母字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Password(System.Int32)">
            <summary>
            随机密码
            </summary>
            <param name="length">长度</param>
            <returns>返回密码字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.En(System.Int32)">
            <summary>
            随机字母
            </summary>
            <param name="length">长度</param>
            <returns>返回英文字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Number(System.Int32)">
            <summary>
            随机数字
            </summary>
            <param name="length">长度</param>
            <returns>返回数字字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Coin">
            <summary>
            随机硬币 正面、反面
            </summary>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.RPS">
            <summary>
            随机石头、剪刀、布
            </summary>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Poker(System.Int32)">
            <summary>
            随机取扑克牌
            </summary>
            <param name="max">总牌数</param>
            <returns>返回一张扑克</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Poker(System.Int32,System.Int32)">
            <summary>
            随机取扑克牌
            </summary>
            <param name="num">要取得的扑克数</param>
            <param name="max">总牌数</param>
            <returns>返回扑克牌列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Upset(System.Int32,System.Int32)">
            <summary>
            洗牌
            </summary>
            <param name="min">最小数</param>
            <param name="max">最大数</param>
            <returns>返回洗牌后的列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Rand.Tag(System.String)">
            <summary>
            随机标签
            </summary>
            <param name="head">请求头</param>
            <returns>返回标签</returns>
        </member>
        <member name="T:MM.Helper.Base.Str">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Str.IsNull(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="str">字符串</param>
            <returns>为空返回true，非空返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Trim(System.String,System.String,System.String)">
            <summary>
            删首尾字符
            </summary>
            <param name="str">被过滤的字符串</param>
            <param name="start">头中含有的字符</param>
            <param name="end">尾中含有的字符</param>
            <returns>删除后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Replace(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            替换字符串
            </summary>
            <param name="str">源字符串</param>
            <param name="oldStr">需替换字符串</param>
            <param name="newStr">替换用的字符串 </param>
            <param name="num">替换次数</param>
            <param name="idx">替换的起始位置</param>
            <returns>返回替换后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Left(System.String,System.String,System.Boolean)">
            <summary>
            取文本左边内容
            </summary>
            <param name="str">被取字符串</param>
            <param name="l">被取字符串</param>
            <param name="bl">如果没有左边内容，是否返回原有内容</param>
            <returns>返回左边内容</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Right(System.String,System.String,System.Boolean)">
            <summary>
            取文本右边内容
            </summary>
            <param name="str">被取字符串</param>
            <param name="r">索引字符串</param>
            <param name="bl">如果没有右边内容，是否返回原有内容</param>
            <returns>返回右边内容</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Between(System.String,System.String,System.String,System.Boolean)">
            <summary>
            取文本中间内容
            </summary>
            <param name="str">原文本</param>
            <param name="l">左边文本</param>
            <param name="r">右边文本</param>
            <param name="bl">如果没有之间的内容，是否返回原有内容</param>
            <returns>返回中间文本内容</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Format(System.String,System.Object[])">
            <summary>
            替换字符串标签
            </summary>
            <param name="str">字符串</param>
            <param name="param">参数</param>
            <returns>返回连接后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ReplaceSymbol(System.String,System.String)">
            <summary>
            替换掉所有字符
            </summary>
            <param name="str">被替换字符串</param>
            <param name="newStr">用作替换的字符串</param>
            <returns>替换成功返回替换后字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ReplaceRx(System.String,System.String,System.String)">
            <summary>
            正则替换
            </summary>
            <param name="str">原字符串</param>
            <param name="rx">正则</param>
            <param name="newStr">替换后的字符</param>
            <returns>返回替换后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ReplaceNull(System.String)">
            <summary>
            过滤不可见字符
            </summary>
            <param name="str">字符串</param>
            <returns>返回新字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ToPIN(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            转为激活码
            </summary>
            <param name="str">被转换的字符串</param>
            <param name="length">分割长度</param>
            <param name="strat">开始位置</param>
            <param name="end">结束位置</param>
            <returns>返回激活码格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ToStr(System.Object)">
            <summary>
            转为字符串
            </summary>
            <param name="obj">对象</param>
            <returns>返回字符串型</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ToLower(System.String)">
            <summary>
            转到小写
            </summary>
            <param name="str">字符串</param>
            <returns>返回小写字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.ToUpper(System.String)">
            <summary>
            转到大写
            </summary>
            <param name="str">字符串</param>
            <returns>返回大写字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Split(System.String,System.String)">
            <summary>
            分割文本
            </summary>
            <param name="str">被分割的字符串</param>
            <param name="symbol">分隔符</param>
            <returns>返回分割后的字符串数组</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Matches(System.String,System.String)">
            <summary>
            正则获取匹配的集合
            </summary>
            <param name="str">被匹配的文本</param>
            <param name="rx">正则</param>
            <returns>返回匹配的结果</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Get(System.String,System.String,System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="str">被取的字符串</param>
            <param name="rx">正则数量</param>
            <param name="num">取出的数量</param>
            <returns>返回获取的列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.GetNum(System.String,System.Int32)">
            <summary>
            获取数字
            </summary>
            <param name="str">被取的字符串</param>
            <param name="num">取出的数量</param>
            <returns>返回获取的列表</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.GetEn(System.String,System.Int32)">
            <summary>
            取英文
            </summary>
            <param name="str">被取字符串</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.GetCh(System.String,System.Int32)">
            <summary>
            取汉字
            </summary>
            <param name="str">被取字符串</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.IsMatch(System.String,System.String)">
            <summary>
            是否匹配正则
            </summary>
            <param name="str">被匹配的字符串</param>
            <param name="rx">正则表达式 </param>
            <returns>匹配返回true，不匹配返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.IsNumOrEn(System.String)">
            <summary>
            是否数字英文
            </summary>
            <param name="str">判断的字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.IsNum(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.IsEn(System.String)">
            <summary>
            判断是否英文
            </summary>
            <param name="str">字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.IsCh(System.String)">
            <summary>
            判断是否为中文
            </summary>
            <param name="str">字符串</param>
            <returns>是中文返回true，不是返回false</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Match(System.String,System.String,System.Int32)">
            <summary>
            取匹配正则的字符串
            </summary>
            <param name="str">被取字符串</param>
            <param name="rx">正则表达式</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.Rx(System.String,System.String)">
            <summary>
            取匹配正则的字符串
            </summary>
            <param name="str">被取字符串</param>
            <param name="rx">正则表达式</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.As2(System.String,System.String)">
            <summary>
            取相似度
            </summary>
            <param name="str1">文本1</param>
            <param name="str2">文本2</param>
            <returns>返回相似值0-100</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.As(System.String,System.String)">
            <summary>
            获取两个字符串的相似度
            </summary>
            <param name="str1">第一个字符串</param>
            <param name="str2">第二个字符串</param>
            <returns>返回双精度相似值</returns>
        </member>
        <member name="M:MM.Helper.Base.Str.PinyinFirst(System.String)">
            <summary> 
            汉字转化为拼音首字母
            </summary> 
            <param name="str">汉字</param> 
            <returns>返回首字母</returns> 
        </member>
        <member name="M:MM.Helper.Base.Str.Pinyin(System.String)">
            <summary> 
            汉字转化为拼音
            </summary> 
            <param name="str">汉字</param> 
            <returns>返回全拼拼音</returns> 
        </member>
        <member name="M:MM.Helper.Base.Str.Compute(System.String,System.String)">
            <summary>
            字符串计算加减乘除
            </summary>
            <param name="text">表达式</param>
            <param name="vars">变量值，多个变量赋值用,分隔</param>
            <returns>返回计算结果</returns>
        </member>
        <member name="T:MM.Helper.Base.Time">
            <summary>
            时间帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Base.Time.Now">
            <summary>
            获取当前时间
            </summary>
            <returns>返回当前时间</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.Str">
            <summary>
            获取当前时间
            </summary>
            <returns>返回当前时间</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.Stamp">
            <summary>
            取当前时间的UNIX时间戳
            </summary>
            <returns>UNIX时间戳</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.ToStamp(System.DateTime)">
            <summary>
            转为秒数
            </summary>
            <param name="time">时间模型</param>
            <returns>返回秒数</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.ToTime(System.Int64)">
            <summary>
            时间戳转时间类型
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.ToTime(System.String)">
            <summary>
            时间字符串转时间类型
            </summary>
            <param name="str">时间字符串</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.IntervalS(System.DateTime,System.DateTime)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.ToTimeS(System.String)">
            <summary>
            字符串转时间
            </summary>
            <param name="str">时间字符串</param>
            <returns>返回时间</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.ToStr(System.DateTime,System.String)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间类型</param>
            <param name="format">格式</param>
            <returns>返回时间格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Base.Time.Interval(System.DateTime,System.DateTime,System.String)">
            <summary>
            比较相差多少天
            </summary>
            <param name="dt1">时间1</param>
            <param name="dt2">时间2</param>
            <param name="timeType">时间差</param>
            <returns>返回相差天数</returns>
        </member>
        <member name="T:MM.Helper.Data.Csv">
            <summary>
            Csv文件帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Csv.Ex">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Csv.Dir">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Csv.Save(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            导出报表为Csv
            </summary>
            <param name="file">文件名</param>
            <param name="dt">DataTable</param>
            <param name="hasTitle">是否含表头</param>
            <returns>保存成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Csv.Save(System.String,Newtonsoft.Json.Linq.JArray,System.Boolean)">
            <summary>
            将Json保存为Excel
            </summary>
            <param name="fileName">文件名</param>
            <param name="jArr">json对象数组</param>
            <param name="hasTitle">是否有标题</param>
            <returns>保存成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Csv.Save(System.String,System.String,System.Boolean)">
            <summary>
            将Json保存为Excel
            </summary>
            <param name="fileName">文件名</param>
            <param name="jArrStr">json字符串</param>
            <param name="hasTitle">是否有标题</param>
            <returns>保存成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Csv.Load(System.String,System.Int32)">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="fileName">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始</param>
            <returns>返回数据库表</returns>
        </member>
        <member name="M:MM.Helper.Data.Csv.Load(System.String,System.String)">
            <summary>
            执行导入
            </summary>
            <param name="fileName">文件名。绝对路径</param>
            <param name="typeName">返回的Table名称</param>
            <returns>DataTable</returns>
        </member>
        <member name="T:MM.Helper.Data.DataTables">
            <summary>
            数据表帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Data.DataTables.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Data.DataTables.GetType(System.String)">
            <summary>
            获取数据类型
            </summary>
            <param name="type">类型名称</param>
            <returns>返回数据类型</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Split(System.Data.DataTable,System.Int32)">
            <summary>
            分解数据表
            </summary>
            <param name="originalTab">需要分解的表</param>
            <param name="rowsNum">每个表包含的数据量</param>
            <returns>返回数据表集合</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.ToTable(System.String)">
            <summary>
            保存数据
            </summary>
            <param name="jArrStr">数据</param>
            <returns>返回数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Sort(System.Data.DataTable,System.String[])">
            <summary>
            设置数据表排序
            </summary>
            <param name="dataTable">数据表</param>
            <param name="arr">排序方式</param>
            <returns>返回数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Sort(System.Data.DataTable,System.String)">
            <summary>
            设置数据表排序
            </summary>
            <param name="dataTable">数据表</param>
            <param name="jarrStr">排序方式（字符串）,多个要进行排序的字段用,分隔</param>
            <returns>返回数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Add(System.Data.DataTable,System.String,System.String)">
            <summary>
            添加字段
            </summary>
            <param name="dataTable">数据表</param>
            <param name="field">字段名</param>
            <param name="type">字段类型</param>
            <returns>返回添加后的数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Has(System.Data.DataTable,System.String)">
            <summary>
            判断是否有字段
            </summary>
            <param name="dataTable">数据表</param>
            <param name="field">字段名</param>
            <returns>返回添加后的数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Del(System.Data.DataTable,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="dataTable">数据表</param>
            <param name="field">字段名</param>
            <returns>返回删除后的数据表</returns>
        </member>
        <member name="M:MM.Helper.Data.DataTables.Del(System.Data.DataTable,System.Int32)">
            <summary>
            删除字段
            </summary>
            <param name="dataTable">数据表</param>
            <param name="index">索引</param>
            <returns>返回删除后的数据表</returns>
        </member>
        <member name="T:MM.Helper.Data.Excel">
            <summary>
            ExcelHelper帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Excel.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Excel.Dir">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Excel.Load(System.String,System.String)">
            <summary>  
            导入Excel 
            </summary>  
            <param name="file">excel文档路径</param>  
            <param name="sheet">表名</param>  
            <returns>导入成功返回table，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.Load(System.String,System.Int32)">
            <summary>  
            导入Excel 
            </summary>  
            <param name="file">excel文档路径</param>  
            <param name="index">表索引（第几张表）</param>
            <returns>导入成功返回table，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.ToTable(NPOI.SS.UserModel.ISheet)">
            <summary>
            将Sheet对象转为DataTable对象
            </summary>
            <param name="sheet">Sheet对象</param>
            <returns>成功返回返回excel表对象，失败返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.LoadJson(System.String,System.String)">
            <summary>
            读取为Json对象 
            </summary>
            <param name="file">文件名</param>
            <param name="sheet">工作表名</param>
            <returns>导入成功返回返回Json数组对象，失败返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.NewField">
            <summary>
            新建字段模型
            </summary>
            <returns>返回字段模型实例</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.Save(System.String,System.Data.DataTable,System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String,System.String)">
            <summary>  
            DataTable导出到Excel文件
            </summary>  
            <param name="file">文件名</param>  
            <param name="dataTable">DataTable数据源</param>
            <param name="field">字段模型</param>
            <param name="header">Excel表头文本（例如：车辆列表）</param>
            <param name="sheet">文件名</param>
            <returns>导出成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.SaveXls(System.String,System.Data.DataTable,System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String,System.String)">
            <summary>  
            DataTable导出到Excel文件(*.xls)
            </summary>  
            <param name="file">文件名</param>  
            <param name="dataTable">DataTable数据源</param>
            <param name="fields">字段模型</param>
            <param name="header">Excel表头文本（例如：车辆列表）</param>
            <param name="sheet">文件名</param>
            <returns>导出成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.SaveXlsx(System.String,System.Data.DataTable,System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String,System.String)">
            <summary>  
            DataTable导出到Excel文件(*.xlsx)
            </summary>  
            <param name="file">文件名</param>  
            <param name="dataTable">DataTable数据源</param>
            <param name="fields">字段模型</param>
            <param name="header">Excel表头文本（例如：车辆列表）</param>
            <param name="sheet">文件名</param>
            <returns>导出成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.GetColName(System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String)">
            <summary>
            设置名称
            </summary>
            <param name="fields">字段模型</param>
            <param name="field">字段</param>
            <returns>返回字段名</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.Save(System.String,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String,System.String)">
            <summary>
            将Json保存为Excel
            </summary>
            <param name="file">文件名</param>
            <param name="jarr">json对象数组</param>
            <param name="fields">字段模型</param>
            <param name="header">表头</param>
            <param name="sheet">工作表名</param>
            <returns>保存成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Excel.Save(System.String,System.String,System.Collections.Generic.List{MM.Helper.Data.FieldModel},System.String,System.String)">
            <summary>
            将Json保存为Excel
            </summary>
            <param name="file">文件名</param>
            <param name="jarrStr">json字符串</param>
            <param name="fields">字段模型</param>
            <param name="header">是否有标题</param>
            <param name="sheet">工作表名</param>
            <returns>保存成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.FieldModel">
            <summary>
            字段模型
            </summary>
        </member>
        <member name="P:MM.Helper.Data.FieldModel.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MM.Helper.Data.FieldModel.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:MM.Helper.Data.FieldModel.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:MM.Helper.Data.Ini">
            <summary>
            ini配置帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Ini.Dir">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Ini.FileName">
            <summary>
            INI文件名
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Ini.Ex">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Ini.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">配置文件</param>
        </member>
        <member name="M:MM.Helper.Data.Ini.Init(System.String)">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Ini.Del(System.String,System.String)">
            <summary>
            删除
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.Get(System.String,System.String,System.Object)">
            <summary>
            查询
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">默认值</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.Get``1(System.String,System.String,System.Object)">
            <summary>
            查询
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">默认值</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.Set(System.String,System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.Has(System.String,System.String)">
            <summary>
            是否有该键
            </summary>
            <param name="section">节</param>
            <param name="key">键名</param>
            <returns>有则返回true，没有则返false</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetInt(System.String,System.String,System.Int32)">
            <summary>
            获取数值
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">默认值</param>
            <returns>返回数值</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetStr(System.String,System.String,System.Int32)">
            <summary>
            获取文本值
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">默认值</param>
            <returns>返回文本值</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetBool(System.String,System.String,System.Int32)">
            <summary>
            获取文本值
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">默认值</param>
            <returns>返回文本值</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetValues(System.String)">
            <summary>
            读取节下所有值
            </summary>
            <param name="section">节</param>
        </member>
        <member name="M:MM.Helper.Data.Ini.DelKey(System.String,System.String)">
            <summary>
            删除键
            </summary>
            <param name="section">配置节</param>
            <param name="key">配置键</param>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetKeys(System.String)">
            <summary>
            获取键
            </summary>
            <param name="section">节</param>
            <returns>返回所有的键</returns>
        </member>
        <member name="M:MM.Helper.Data.Ini.GetSections">
            <summary>
            从Ini文件中，读取所有节的名称
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Ini.DelSection(System.String)">
            <summary>
            删除节
            </summary>
            <param name="section">配置节</param>
        </member>
        <member name="M:MM.Helper.Data.Ini.Update">
            <summary>
            更新配置文件
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Ini.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Ini.Finalize">
            <summary>
            确保资源释放
            </summary>
        </member>
        <member name="T:MM.Helper.Data.Json">
            <summary>
            Json帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Json.NewJArr(System.String)">
            <summary>
            新建Jarry对象
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns>返回Jarry对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.NewJObj(System.String)">
            <summary>
            新建JObject对象
            <param name="jsonStr">json字符串</param>
            </summary>
            <returns>返回JObject对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.FromUrl(System.String,System.Boolean)">
            <summary>
            Url参数转Json
            </summary>
            <param name="urlQuery">Url参数</param>
            <param name="toLower">是否转为小写</param>
            <returns>返回Json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Add(Newtonsoft.Json.Linq.JObject,System.String,System.Object)">
            <summary>
            添加成员
            </summary>
            <param name="jobj">json对象</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Del(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            删除
            </summary>
            <param name="jobj">json对象</param>
            <param name="key">键</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Set(Newtonsoft.Json.Linq.JObject,System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="jobj">json对象</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.AddOrSet(Newtonsoft.Json.Linq.JObject,System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="jobj">json对象</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Add(Newtonsoft.Json.Linq.JArray,System.Object)">
            <summary>
            添加成员
            </summary>
            <param name="jarr">json对象</param>
            <param name="value">值</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Del(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            删除
            </summary>
            <param name="jarr">json对象</param>
            <param name="index">键</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Set(Newtonsoft.Json.Linq.JArray,System.Int32,System.Object)">
            <summary>
            修改
            </summary>
            <param name="jarr">json对象</param>
            <param name="index">键</param>
            <param name="value">值</param>
            <returns>返回json对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Dumps(System.Object,System.Boolean,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="format">是否格式化</param>
            <param name="noNull">是否去除空值</param>
            <returns>返回json字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Loads(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="str">json字符串</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Json.Loads``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="str">json字符串</param>
            <returns>返回对象</returns>
        </member>
        <member name="T:MM.Helper.Data.Memory">
            <summary>
            内存缓存帮助类
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Memory._Memory">
            <summary>
            内存初始化
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Memory._Prefix">
            <summary>
            键前缀
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Memory.DB">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Memory.Head(System.String)">
            <summary>
            获取或设置主键前缀
            </summary>
            <param name="key_prefix">键前缀名, 为空则获取前缀</param>
        </member>
        <member name="M:MM.Helper.Data.Memory.SetDB(System.Int64)">
            <summary>
            设置当前数据库
            </summary>
            <param name="db">数据库索引</param>
        </member>
        <member name="M:MM.Helper.Data.Memory.GetDB">
            <summary>
            设置当前数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Memory.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="linkStr">链接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Memory.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Memory.Finalize">
            <summary>
            结束函数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Memory.Del(System.String)">
            <summary>
            删除
            </summary>
            <param name="key">键</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Set(System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Set(System.String,System.Object,System.Int32)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="longTime">缓存时长</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Set(System.String,System.Object,System.String)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Get(System.String)">
            <summary>
            查询
            </summary>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Get``1(System.String)">
            <summary>
            查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Dict(System.String,System.String)">
            <summary>
            查询集合
            </summary>
            <param name="key">键关键词，为空则匹配所有</param>
            <param name="mode">查询方式：1、startWith匹配前缀；2、endWith匹配后缀；3、regex匹配正则表达式</param>
            <returns>返回查询结果集合</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Export(System.String)">
            <summary>
            导出
            </summary>
            <param name="file">文件名</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.GetKeys(System.String,System.String)">
            <summary>
            获取所有键
            </summary>
            <param name="key">键关键词</param>
            <param name="mode">匹配方式，start匹配前缀，end匹配后缀，regex匹配正则</param>
            <returns>返回键列表</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Has(System.String)">
            <summary>
            判断值是否存在
            </summary>
            <param name="key">键</param>
            <returns>有则返回true，没有则返false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Import(System.String,System.Int32)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="longTime">滑动过期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.Import(System.String,System.String)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.SetEval(System.String,System.String)">
            <summary>
            修改——通过函数式方式修改
            </summary>
            <param name="key">键</param>
            <param name="funStr">函数式</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Memory.SetFun(System.String,System.Func{System.Object,System.Object})">
            <summary>
            修改——通过函数进行修改
            </summary>
            <param name="key">键</param>
            <param name="fun">函数</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.Mysql">
            <summary>
            Mysql数据库帮助类
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Mysql.connStr_default">
            <summary>
            mysql连接字符串
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.ConnStr">
            <summary>
            mysql连接字符串
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Database">
            <summary>
            获取数据库名称
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Table">
            <summary>
            操作的数据表
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Size">
            <summary>
            单页显示条数
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Mysql.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetEx">
            <summary>
            获取错误提示
            </summary>
            <returns>返回错误提示</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetSql">
            <summary>
            获取当前的SQL语句
            </summary>
            <returns>返回SQL语句</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetDB">
            <summary>
            获取数据库名
            </summary>
            <returns>返回数据库名</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.SetSize(System.Int32)">
            <summary>
            设置分页大小——每页显示的数量
            </summary>
            <param name="size">数量</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.SetPage(System.Int32)">
            <summary>
            设置查询页 —— 分页后的结果第几页
            </summary>
            <param name="page">当前页</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.SetTable(System.String)">
            <summary>
            设置查询表
            </summary>
            <param name="table">查询表</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connStr">数据库连接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="connStr">数据库连接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Open">
            <summary>
            开启数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Link(System.String)">
            <summary>
            连接数据库
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Mysql.CheckLink">
            <summary>
            判断数据库是否连接
            </summary>
            <returns>连接成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Finalize">
            <summary>
            结束函数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Execute(System.String)">
            <summary>
            增删改
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回执行成功条数</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.ExecuteAsync(System.String)">
            <summary>
            增删改——异步
            </summary>
            <param name="sql">sql语句</param>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryAsync(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryAsync``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Query(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryFirst(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Query``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryFirst``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型列表</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.QueryFirstStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Get(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回列表查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetFirst(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回单条查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetAll(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回列表查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetFirstStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetFirst``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Get``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.GetAll``1(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Add(System.String,System.String)">
            <summary>
            增
            </summary>
            <param name="personStr">字段名</param>
            <param name="valueStr">对应字段值</param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Set(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.SetAsync(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.Del(System.String)">
            <summary>
            删
            </summary>
            <param name="whereStr">查询条件</param>
            <returns>删除成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.DelAsOne(System.String,System.String,System.String,System.String)">
            <summary>
            删除重复记录并留唯一
            </summary>
            <param name="whereStr">删除的条件语句</param>
            <param name="field">用作判断的字段</param>
            <param name="IDfield">ID字段</param>
            <param name="keep">保留方式，max或min</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.AddOrSet(System.String,System.String,System.String)">
            <summary>
            增加或更新
            </summary>
            <param name="personStr">字段名,需带主键</param>
            <param name="valueStr">对应字段值</param>
            <param name="setStr"></param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Mysql.AddOrSet(System.String,System.String)">
            <summary>
            添加或修改
            </summary>
            <param name="whereStr">条件</param>
            <param name="setStr">设置值</param>
            <returns>成功返回ture，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.MysqlS">
            <summary>
            Mysql高级帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.Count(System.String,System.String)">
            <summary>
            统计记录个数
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">统计的字段</param>
            <returns>返回统计结果</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.Regexp(System.String,System.String,System.String,System.String)">
            <summary>
            正则查询
            </summary>
            <param name="whereField">字段</param>
            <param name="match">正则</param>
            <param name="field">获取的字段 *号表示获取全部字段</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.AddDB(System.String)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.AddTable(System.String,System.String)">
            <summary>
            创建表
            </summary>
            <param name="fieldAndType">字段名加字段类型 例如 number INT(11), 需设主键时在前面加Key</param>
            <param name="table">表名</param>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.AddTableKey(System.String,System.String)">
            <summary>
            创建表带自动递增主键
            </summary>
            <param name="key">主键</param>
            <param name="table">表名</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.DelTable(System.String)">
            <summary>
            创建表
            </summary>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.GetTables">
            <summary>
            获取所有表名
            </summary>
            <returns>获取成功返回所有表名</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.CountRow(System.String,System.String)">
            <summary>
            查询表项数
            </summary>
            <param name="tableName">表名</param>
            <param name="filed">字段</param>
            <returns>返回表项数值</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.AddCol(System.String)">
            <summary>
            添加列
            </summary>
            <param name="col">列值</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.AddCol(System.String,System.String,System.Int32)">
            <summary>
            添加列
            </summary>
            <param name="name">列名称</param>
            <param name="type">类型</param>
            <param name="len">长度</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.MysqlS.DelCol(System.String)">
            <summary>
            列名
            </summary>
            <param name="name">删除列</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.Param">
            <summary>
            验证类
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Param.Check(MM.Helper.Models.ParamModel,System.Object)">
            <summary>
            验证参数
            </summary>
            <param name="v">验证模型</param>
            <param name="value">验证值</param>
            <returns>验证通过返回null，否则返回错误提示</returns>
        </member>
        <member name="M:MM.Helper.Data.Param.Check(System.Collections.Generic.Dictionary{System.String,MM.Helper.Models.ParamModel},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            验证参数
            </summary>
            <param name="checkDt">验证模型字典</param>
            <param name="paramDt">参数字典</param>
            <returns>验证通过返回null，否则返回错误提示</returns>
        </member>
        <member name="M:MM.Helper.Data.Param.New">
            <summary>
            新建验证参数模型
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Param.NewDict">
            <summary>
            新建验证参数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Param.Demo">
            <summary>
            验证模型示例
            </summary>
            <returns>返回验证模型示例</returns>
        </member>
        <member name="M:MM.Helper.Data.Param.DemoDict">
            <summary>
            验证模型示例
            </summary>
            <returns>返回验证模型示例</returns>
        </member>
        <member name="T:MM.Helper.Data.Redis">
            <summary>
            Redis帮助类
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Redis.connStr_default">
            <summary>
            默认连接字符串，当ConnStr为空时使用该连接
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Redis.Ex">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Redis.ConnStr">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Redis.DB">
            <summary>
            连接的数据库序号
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Redis._Prefix">
            <summary>
            键前缀
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Redis.conn">
            <summary>
            汇集Redis客户端管理器
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Redis._Redis">
            <summary>
            Rdeis通讯接口
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.Head(System.String)">
            <summary>
            获取或设置主键前缀
            </summary>
            <param name="key_prefix">键前缀名, 为空则获取前缀</param>
        </member>
        <member name="M:MM.Helper.Data.Redis.SetDB(System.Int64)">
            <summary>
            设置当前数据库
            </summary>
            <param name="db">数据库索引</param>
        </member>
        <member name="M:MM.Helper.Data.Redis.GetDB">
            <summary>
            设置当前数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="connStr">链接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Redis.Open">
            <summary>
            开启连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.ToLink(System.String)">
            <summary>
            转换链接
            </summary>
            <param name="_linkConfig">Redis链接配置</param>
        </member>
        <member name="M:MM.Helper.Data.Redis.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.Finalize">
            <summary>
            结束函数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Redis.Del(System.String)">
            <summary>
            删除
            </summary>
            <param name="key">键</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Set(System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Set(System.String,System.Object,System.Int32)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="longTime">缓存时长</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Set(System.String,System.Object,System.String)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Get(System.String)">
            <summary>
            查询
            </summary>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Get``1(System.String)">
            <summary>
            查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Dict(System.String,System.String)">
            <summary>
            查询集合
            </summary>
            <param name="key">键关键词，为空则匹配所有</param>
            <param name="mode">查询方式：1、startWith匹配前缀；2、endWith匹配后缀；3、regex匹配正则表达式</param>
            <returns>返回查询结果集合</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Export(System.String)">
            <summary>
            导出
            </summary>
            <param name="file">文件名</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.GetKeys(System.String,System.String)">
            <summary>
            获取所有键
            </summary>
            <param name="key">键关键词</param>
            <param name="mode">匹配方式，start匹配前缀，end匹配后缀，regex匹配正则</param>
            <returns>返回键列表</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Has(System.String)">
            <summary>
            判断值是否存在
            </summary>
            <param name="key">键</param>
            <returns>有则返回true，没有则返false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Import(System.String,System.Int32)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="longTime">滑动过期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.Import(System.String,System.String)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.SetEval(System.String,System.String)">
            <summary>
            修改——通过函数式方式修改
            </summary>
            <param name="key">键</param>
            <param name="funStr">函数式</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Redis.SetFun(System.String,System.Func{System.Object,System.Object})">
            <summary>
            修改——通过函数进行修改
            </summary>
            <param name="key">键</param>
            <param name="fun">函数</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.ServerConfig">
            <summary>
            服务器
            </summary>
        </member>
        <member name="P:MM.Helper.Data.ServerConfig.Server">
            <summary>
            主机地址/IP
            </summary>
        </member>
        <member name="P:MM.Helper.Data.ServerConfig.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:MM.Helper.Data.ServerConfig.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:MM.Helper.Data.ServerConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:MM.Helper.Data.ServerConfig.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:MM.Helper.Data.SQLite">
            <summary>
            Sqlite数据库帮助类
            </summary>
        </member>
        <member name="F:MM.Helper.Data.SQLite.connStr_default">
            <summary>
            sqlite连接字符串
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.ConnStr">
            <summary>
            sqlite连接字符串
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Dir">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Database">
            <summary>
            获取数据库名称
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Table">
            <summary>
            操作的数据表
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Size">
            <summary>
            单页显示条数
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:MM.Helper.Data.SQLite.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetEx">
            <summary>
            获取错误提示
            </summary>
            <returns>返回错误提示</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetSql">
            <summary>
            获取当前的SQL语句
            </summary>
            <returns>返回SQL语句</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetDB">
            <summary>
            获取数据库名
            </summary>
            <returns>返回数据库名</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.SetSize(System.Int32)">
            <summary>
            设置分页大小——每页显示的数量
            </summary>
            <param name="size">数量</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.SetPage(System.Int32)">
            <summary>
            设置查询页 —— 分页后的结果第几页
            </summary>
            <param name="page">当前页</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.SetTable(System.String)">
            <summary>
            设置查询表
            </summary>
            <param name="table">查询表</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="db">数据库文件路径</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="db">数据库文件路径</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Open">
            <summary>
            开启数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Link(System.String)">
            <summary>
            连接数据库
            </summary>
            <param name="db">数据库文件路径</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLite.CheckLink">
            <summary>
            判断数据库是否连接
            </summary>
            <returns>连接成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Finalize">
            <summary>
            结束函数
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Execute(System.String)">
            <summary>
            增删改
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回执行成功条数</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.ExecuteAsync(System.String)">
            <summary>
            增删改——异步
            </summary>
            <param name="sql">sql语句</param>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryAsync(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryAsync``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Query(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryFirst(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Query``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryFirst``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型列表</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.QueryFirstStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Get(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回列表查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetFirst(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回单条查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetAll(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回列表查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetFirstStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetFirst``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Get``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.GetAll``1(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Add(System.String,System.String)">
            <summary>
            增
            </summary>
            <param name="personStr">字段名</param>
            <param name="valueStr">对应字段值</param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Set(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.SetAsync(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.Del(System.String)">
            <summary>
            删
            </summary>
            <param name="whereStr">查询条件</param>
            <returns>删除成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.DelAsOne(System.String,System.String,System.String,System.String)">
            <summary>
            删除重复记录并留唯一
            </summary>
            <param name="whereStr">删除的条件语句</param>
            <param name="field">用作判断的字段</param>
            <param name="IDfield">ID字段</param>
            <param name="keep">保留方式，max或min</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.AddOrSet(System.String,System.String,System.String)">
            <summary>
            增加或更新
            </summary>
            <param name="personStr">字段名,需带主键</param>
            <param name="valueStr">对应字段值</param>
            <param name="setStr"></param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLite.AddOrSet(System.String,System.String)">
            <summary>
            添加或修改
            </summary>
            <param name="whereStr">条件</param>
            <param name="setStr">设置值</param>
            <returns>成功返回ture，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.SQLiteS">
            <summary>
            Sqlite高级帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.Count(System.String,System.String)">
            <summary>
            统计记录个数
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">统计的字段</param>
            <returns>返回统计结果</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.Regexp(System.String,System.String,System.String,System.String)">
            <summary>
            正则查询
            </summary>
            <param name="whereField">字段</param>
            <param name="match">正则</param>
            <param name="field">获取的字段 *号表示获取全部字段</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.AddDB(System.String)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.AddTable(System.String,System.String)">
            <summary>
            创建表
            </summary>
            <param name="fieldAndType">字段名加字段类型 例如 number INT(11), 需设主键时在前面加Key</param>
            <param name="table">表名</param>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.AddTableKey(System.String,System.String)">
            <summary>
            创建表带自动递增主键
            </summary>
            <param name="key">主键</param>
            <param name="table">表名</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.DelTable(System.String)">
            <summary>
            创建表
            </summary>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.GetTables">
            <summary>
            获取所有表名
            </summary>
            <returns>获取成功返回所有表明，获取失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.CountRow(System.String,System.String)">
            <summary>
            查询表项数
            </summary>
            <param name="tableName">表名</param>
            <param name="filed">字段</param>
            <returns>返回表项数值</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.AddCol(System.String)">
            <summary>
            添加列
            </summary>
            <param name="col">列值</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.AddCol(System.String,System.String,System.Int32)">
            <summary>
            添加列
            </summary>
            <param name="name">列名称</param>
            <param name="type">类型</param>
            <param name="len">长度</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.SQLiteS.DelCol(System.String)">
            <summary>
            列名
            </summary>
            <param name="name">删除列</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.Xml">
            <summary>
            Xml帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Data.Xml.Dir">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="F:MM.Helper.Data.Xml.settings">
            <summary>
            写入设置
            </summary>
        </member>
        <member name="M:MM.Helper.Data.Xml.Load(System.String)">
            <summary>
            加载xml文件
            </summary>
            <param name="file">文件名</param>
            <returns>返回xml对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Save(System.String,System.Xml.Linq.XElement)">
            <summary>
            保存xml文件
            </summary>
            <param name="file">文件名</param>
             <param name="xml">xml对象</param>
        </member>
        <member name="M:MM.Helper.Data.Xml.Save(System.String,System.String)">
            <summary>
            保存xml文件
            </summary>
            <param name="file">文件名</param>
            <param name="xmlStr">xml字符串</param>
        </member>
        <member name="M:MM.Helper.Data.Xml.New(System.String)">
            <summary>
            新建xml对象
            </summary>
            <param name="rootname">根标签</param>
            <returns>返回xml对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToStr(System.Xml.Linq.XElement)">
            <summary>
            Xml对象转字符串
            </summary>
            <param name="xml">xml对象</param>
            <returns>返回xml字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToXml(System.String)">
            <summary>
            通过xml字符串加载xml
            </summary>
            <param name="xmlStr">xml字符串</param>
            <returns>返回xml模型</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Encode(System.String)">
            <summary>
            替换html中的特殊字符
            </summary>
            <param name="theString">需要进行替换的文本</param>
            <returns>替换完的文本。</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToXmlS(System.String)">
            <summary>
            超级转Xml
            </summary>
            <param name="xmlStr">xml字符串</param>
            <returns>返回xml对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToXml``1(``0)">
            <summary>
            模型转xml对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="m">模型</param>
            <returns>返回xml对象</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Dumps(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>返回xml格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Loads(System.Object,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="obj">对象</param>
            <param name="xml">xml字符串</param>
            <returns>返回xml格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Change(System.String)">
            <summary>
            转换旧版xml
            </summary>
            <param name="xml">xml字符串</param>
            <returns>转旧版xxml</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Dumps``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="xml">xml字符串</param>
            <returns>返回泛型</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToModel``1(System.String)">
            <summary>
            获取模型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="xml">xml格式字符串</param>
            <returns>返回泛型模型</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.ToModel(System.Object,System.String)">
            <summary>
            获取模型
            </summary>
            <param name="obj">模型</param>
            <param name="xml">xml格式字符串</param>
            <returns>返回泛模型</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.GetModel(System.Object,System.Xml.XmlNode)">
            <summary>
            获取模型
            </summary>
            <param name="obj">模型</param>
            <param name="xml">xml格式字符串</param>
            <returns>返回泛模型</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.FromJson(System.String)">
            <summary>
            json字符串转xml字符串
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns>返回xml格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Get(System.Xml.Linq.XElement,System.String)">
            <summary>
            取Xml
            </summary>
            <param name="xml">xml对象</param>
            <param name="key">xml节点名称</param>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.GetChild(System.Xml.Linq.XElement)">
            <summary>
            取Xml子元素合集
            </summary>
            <param name="xml">xml对象</param>
            <returns>返回Xml子元素合集</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Set(System.Xml.Linq.XElement,System.String,System.Object)">
            <summary>
            设置Xml
            </summary>
            <param name="xml">xml对象</param>
            <param name="key">xml节点名称</param>
            <param name="value">增改的xml对象</param>
            <returns>设置成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.GetAtt(System.Xml.Linq.XElement,System.String)">
            <summary>
            取属性值
            </summary>
            <param name="xml">xml对象</param>
            <param name="key">键</param>
            <returns>返回属性值</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.SetAtt(System.Xml.Linq.XElement,System.String,System.Object)">
            <summary>
            修改属性
            </summary>
            <param name="xml">xml对象</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>修改成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.GetValue(System.Xml.Linq.XElement)">
            <summary>
            取值
            </summary>
            <param name="xml">xml对象</param>
            <returns>返回字符串值</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.SetValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            设置值
            </summary>
            <param name="xml">xml对象</param>
            <param name="value"></param>
            <returns>设置成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.Xml.Del(System.Xml.Linq.XElement,System.String)">
            <summary>
            删除节点
            </summary>
            <param name="xml">xml对象</param>
            <param name="key">键</param>
            <returns>返回删除后xml对象</returns>
        </member>
        <member name="T:MM.Helper.Data.ICache">
            <summary>
            缓存类接口
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ICache.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="linkStr">链接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.ICache.Head(System.String)">
            <summary>
            获取或设置主键前缀
            </summary>
            <param name="key_prefix">键前缀名, 为空则获取前缀</param>
        </member>
        <member name="M:MM.Helper.Data.ICache.SetDB(System.Int64)">
            <summary>
            设置当前数据库
            </summary>
            <param name="db">数据库索引</param>
        </member>
        <member name="M:MM.Helper.Data.ICache.GetDB">
            <summary>
            设置当前数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ICache.Del(System.String)">
            <summary>
            删除
            </summary>
            <param name="key">键</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Set(System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="longTime">缓存时长</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Set(System.String,System.Object,System.String)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Get(System.String)">
            <summary>
            查询
            </summary>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Get``1(System.String)">
            <summary>
            查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Dict(System.String,System.String)">
            <summary>
            查询集合
            </summary>
            <param name="key">键关键词，为空则匹配所有</param>
            <param name="mode">查询方式：1、startWith匹配前缀；2、endWith匹配后缀；3、regex匹配正则表达式</param>
            <returns>返回查询结果集合</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Export(System.String)">
            <summary>
            导出
            </summary>
            <param name="file">文件名</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.GetKeys(System.String,System.String)">
            <summary>
            查询集合
            </summary>
            <param name="key">键关键词，为空则匹配所有</param>
            <param name="mode">查询方式：1、startWith匹配前缀；2、endWith匹配后缀；3、regex匹配正则表达式</param>
            <returns>返回查询结果集合</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Has(System.String)">
            <summary>
            判断值是否存在
            </summary>
            <param name="key">键</param>
            <returns>有则返回true，没有则返false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Import(System.String,System.Int32)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="longTime">滑动过期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.Import(System.String,System.String)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <param name="dateTime">到期时间</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.SetEval(System.String,System.String)">
            <summary>
            修改——通过函数式方式修改
            </summary>
            <param name="key">键</param>
            <param name="funStr">函数式</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ICache.SetFun(System.String,System.Func{System.Object,System.Object})">
            <summary>
            修改——通过函数进行修改
            </summary>
            <param name="key">键</param>
            <param name="fun">函数</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.IConfig">
            <summary>
            配置类接口
            </summary>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Add(System.String,System.Object)">
            <summary>
            添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.AddOrSet(System.String,System.Object)">
            <summary>
            添加或修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Del(System.String)">
            <summary>
            删除
            </summary>
            <param name="key">键</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Dict(System.String,System.String)">
            <summary>
            查询集合
            </summary>
            <param name="key">键关键词，为空则匹配所有</param>
            <param name="mode">查询方式：1、startWith匹配前缀；2、endWith匹配后缀；3、regex匹配正则表达式</param>
            <returns>返回查询结果集合</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Export(System.String)">
            <summary>
            导出
            </summary>
            <param name="file">文件名</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Get(System.String)">
            <summary>
            查询
            </summary>
            <param name="key">键</param>
            <returns>有则返回查询结果，没有则返回null</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Has(System.String)">
            <summary>
            是否有该键
            </summary>
            <param name="key">键名</param>
            <returns>有则返回true，没有则返false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Head(System.String)">
            <summary>
            获取或设置主键前缀
            </summary>
            <param name="key_prefix">键前缀名, 为空则获取前缀</param>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Import(System.String)">
            <summary>
            导入
            </summary>
            <param name="file">文件名</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.Set(System.String,System.Object)">
            <summary>
            修改
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.SetEval(System.String,System.String)">
            <summary>
            修改——通过函数式方式修改
            </summary>
            <param name="key">键</param>
            <param name="funStr">函数式</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.IConfig.SetFun(System.String,System.Func{System.Object,System.Object})">
            <summary>
            修改——通过函数进行修改
            </summary>
            <param name="key">键</param>
            <param name="fun">函数</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.ISql">
            <summary>
            数据库操作类接口
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetEx">
            <summary>
            获取错误提示
            </summary>
            <returns>返回错误提示</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetSql">
            <summary>
            获取当前的SQL语句
            </summary>
            <returns>返回SQL语句</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetDB">
            <summary>
            获取数据库名
            </summary>
            <returns>返回数据库名</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.SetSize(System.Int32)">
            <summary>
            设置分页大小——每页显示的数量
            </summary>
            <param name="size">数量</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.SetPage(System.Int32)">
            <summary>
            设置查询页 —— 分页后的结果第几页
            </summary>
            <param name="page">当前页</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.SetTable(System.String)">
            <summary>
            设置查询表
            </summary>
            <param name="table">查询表</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="connStr">数据库连接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.Open">
            <summary>
            开启数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISql.Link(System.String)">
            <summary>
            连接数据库
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISql.CheckLink">
            <summary>
            判断数据库是否连接
            </summary>
            <returns>连接成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISql.Execute(System.String)">
            <summary>
            增删改
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回执行成功条数</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.ExecuteAsync(System.String)">
            <summary>
            增删改——异步
            </summary>
            <param name="sql">sql语句</param>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryAsync(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryAsync``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回查询结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Query(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryFirst(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Query``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryFirst``1(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回模型列表</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目集合</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.QueryFirstStr(System.String)">
            <summary>
            执行SQL语句-查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回项目</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Get(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetFirst(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetAll(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetFirstStr(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式查询结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetFirst``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Get``1(System.String,System.String,System.String)">
            <summary>
            查
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.GetAll``1(System.String,System.String)">
            <summary>
            查找全部
            </summary>
            <param name="field">字段名</param>
            <param name="orderBy">排序方式</param>
            <returns>返回模型集合</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Add(System.String,System.String)">
            <summary>
            增
            </summary>
            <param name="personStr">字段名</param>
            <param name="valueStr">对应字段值</param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Set(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.SetAsync(System.String,System.String)">
            <summary>
            改
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="setStr">修改项</param>
            <returns>修改成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.Del(System.String)">
            <summary>
            删
            </summary>
            <param name="whereStr">查询条件</param>
            <returns>删除成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.DelAsOne(System.String,System.String,System.String,System.String)">
            <summary>
            删除重复记录并留唯一
            </summary>
            <param name="whereStr">删除的条件语句</param>
            <param name="field">用作判断的字段</param>
            <param name="IDfield">ID字段</param>
            <param name="keep">保留方式，max或min</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.AddOrSet(System.String,System.String,System.String)">
            <summary>
            增加或更新
            </summary>
            <param name="personStr">字段名,需带主键</param>
            <param name="valueStr">对应字段值</param>
            <param name="setStr"></param>
            <returns>添加成功返回true,失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISql.AddOrSet(System.String,System.String)">
            <summary>
            添加或修改
            </summary>
            <param name="whereStr">条件</param>
            <param name="setStr">设置值</param>
            <returns>成功返回ture，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Data.ISqls">
            <summary>
            数据库操作类接口
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISqls.Regexp(System.String,System.String,System.String,System.String)">
            <summary>
            正则查询
            </summary>
            <param name="whereField">字段</param>
            <param name="match">正则</param>
            <param name="field">获取的字段 *号表示获取全部字段</param>
            <param name="orderBy">排序方式</param>
            <returns>返回Json格式字符串</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.Count(System.String,System.String)">
            <summary>
            统计记录个数
            </summary>
            <param name="whereStr">查询条件</param>
            <param name="field">统计的字段</param>
            <returns>返回统计结果</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.AddDB(System.String)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:MM.Helper.Data.ISqls.AddTable(System.String,System.String)">
            <summary>
            创建表
            </summary>
            <param name="fieldAndType">字段名加字段类型 例如 number INT(11), 需设主键时在前面加Key</param>
            <param name="table">表名</param>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.AddTableKey(System.String,System.String)">
            <summary>
            创建表带自动递增主键
            </summary>
            <param name="key">主键</param>
            <param name="table">表名</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.DelTable(System.String)">
            <summary>
            创建表
            </summary>
            <returns>创建成功返回ture，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.GetTables">
            <summary>
            获取所有表名
            </summary>
            <returns>获取成功返回所有表名</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.CountRow(System.String,System.String)">
            <summary>
            查询表项数
            </summary>
            <param name="tableName">表名</param>
            <param name="filed">字段</param>
            <returns>返回表项数值</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.AddCol(System.String)">
            <summary>
            添加列
            </summary>
            <param name="col">列值</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.AddCol(System.String,System.String,System.Int32)">
            <summary>
            添加列
            </summary>
            <param name="name">列名称</param>
            <param name="type">类型</param>
            <param name="len">长度</param>
            <returns>添加成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Data.ISqls.DelCol(System.String)">
            <summary>
            列名
            </summary>
            <param name="name">删除列</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Indexer">
            <summary>
            常用帮助类索引目录
            </summary>
        </member>
        <member name="P:MM.Helper.Indexer.Dir">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="M:MM.Helper.Indexer.Arr">
            <summary>
            数组类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Colour">
            <summary>
            颜色类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Dict">
            <summary>
            字典类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Encode">
            <summary>
            编码类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Encrypt">
            <summary>
            加密类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Num">
            <summary>
            数字类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Obj">
            <summary>
            对象类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Rand">
            <summary>
            随机类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Str">
            <summary>
            字符串类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Time">
            <summary>
            时间类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Csv">
            <summary>
            Csv表格类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.DataTables">
            <summary>
            数据表类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Excel">
            <summary>
            Excel表格类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Ini">
            <summary>
            Ini配置类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Json">
            <summary>
            json数据操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Memory">
            <summary>
            内存缓存类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Mysql">
            <summary>
            Mysql数据库操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.MysqlS">
            <summary>
            Mysql数据库操作类（高级）
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Param">
            <summary>
            参数验证过滤类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Redis">
            <summary>
            Redis缓存类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.SQLite">
            <summary>
            SQLite数据库操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.SQLiteS">
            <summary>
            SQLite数据库操作类（高级）
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Cache">
            <summary>
            缓存操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Xml">
            <summary>
            xml数据树操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.File">
            <summary>
            文件操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Cmd">
            <summary>
            脚本指令操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Log">
            <summary>
            日志操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Speed">
            <summary>
            测速操作类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Api">
            <summary>
            Web Api请求
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Email">
            <summary>
            邮件发送类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Ftp">
            <summary>
            Ftp传输类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Html">
            <summary>
            网页类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Https">
            <summary>
            网络请求类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.MsgCrypt">
            <summary>
            消息加解密类
            </summary>
            <returns>返回帮助类</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Look(System.Object)">
            <summary>
            查看对象
            </summary>
            <param name="obj">对象</param>
            <returns>返回对象详情</returns>
        </member>
        <member name="M:MM.Helper.Indexer.Info">
            <summary>
            查看版本信息
            </summary>
            <returns>返回版本信息模型</returns>
        </member>
        <member name="T:MM.Helper.Infos.ContactInfo">
            <summary>
            联系信息
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.ContactInfo.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.ContactInfo.Wechat">
            <summary>
            微信
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.ContactInfo.Phone">
            <summary>
            联系电话
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.ContactInfo.Web">
            <summary>
            个人网站
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.ContactInfo.GitHub">
            <summary>
            源码网址
            </summary>
        </member>
        <member name="T:MM.Helper.Infos.DllInfo">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.DllInfo.Name">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.DllInfo.Version">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.DllInfo.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.DllInfo.Copyright">
            <summary>
            版权归属
            </summary>
        </member>
        <member name="P:MM.Helper.Infos.DllInfo.Contact">
            <summary>
            联系信息
            </summary>
        </member>
        <member name="T:MM.Helper.Libs.ComputeLib">
            <summary>
            计算代码片段
            </summary>
        </member>
        <member name="P:MM.Helper.Libs.ComputeLib.Ex">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.Compute(System.String,System.String)">
            <summary>
            文本计算
            </summary>
            <param name="text">文本</param>
            <param name="vars">变量字符串</param>
            <returns>返回计算结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.Expression(System.String,System.String)">
            <summary>
            带未知数的四则运算，公式表达式：((x+y)*y+100)*(x+y+price)  未知数赋值字符串格式："x=3,y=5,price=10.2"  
            </summary>
            <param name="equation">四则运算公式字符串表达式</param>
            <param name="vars">未知数赋值字符串</param>
            <returns>返回计算结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.Algebra(System.String,System.String)">
            <summary>
            代数
            </summary>
            <param name="equation">方程式</param>
            <param name="vars">变量字符串</param>
            <returns>返回计算结果字符串</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.Rx(System.String)">
            <summary>
            正则算术式——将式子变为电脑计算规范的算数式子
            </summary>
            <param name="equation">算术式</param>
            <returns>返回正则结果</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.Split(System.String)">
            <summary>
            逐字分割
            </summary>
            <param name="str">被分割的字符串</param>
            <returns>返回分割后的字符串数组</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.GetRight(System.String,System.String,System.Boolean)">
            <summary>
            取文本右边内容
            </summary>
            <param name="str">文本</param>
            <param name="r">取文本右边</param>
            <param name="bl">右边为空时是否取全内容</param>
            <returns>右边内容</returns>
        </member>
        <member name="M:MM.Helper.Libs.ComputeLib.IsNum(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">字符串</param>
            <returns>是数字返回true，不是返回false</returns>
        </member>
        <member name="T:MM.Helper.Models.DateTimeModel">
            <summary>
            时间验证模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DateTimeModel.Min">
            <summary>
            最小时间，例如：1970-01-01 00:00:00
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DateTimeModel.Max">
            <summary>
            最大时间，例如：2019-12-31 00:00:00
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DateTimeModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DateTimeModel.Message_min">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DateTimeModel.Message_max">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.StrLenModel">
            <summary>
            字符串长度验证模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.StrLenModel.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:MM.Helper.Models.StrLenModel.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:MM.Helper.Models.StrLenModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Models.StrLenModel.Message_min">
            <summary>
            错误提示——最小
            </summary>
        </member>
        <member name="P:MM.Helper.Models.StrLenModel.Message_max">
            <summary>
            错误提示——最大
            </summary>
        </member>
        <member name="T:MM.Helper.Models.RangeModel">
            <summary>
            数值范围验证模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RangeModel.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RangeModel.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RangeModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RangeModel.Message_min">
            <summary>
            错误提示——最小
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RangeModel.Message_max">
            <summary>
            错误提示——最大
            </summary>
        </member>
        <member name="T:MM.Helper.Models.RemoteModel">
            <summary>
            站外验证模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RemoteModel.Url">
            <summary>
            外网验证地址
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RemoteModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.NotEmptyModel">
            <summary>
            非空验证模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.NotEmptyModel.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:MM.Helper.Models.RegexModel">
            <summary>
            规则验证模型（用于后缀名、特定格式、或正则验证）
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RegexModel.Format">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RegexModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.IdenticalModel">
            <summary>
            验证两个参数是否相同
            </summary>
        </member>
        <member name="P:MM.Helper.Models.IdenticalModel.Field">
            <summary>
            比较字段
            </summary>
        </member>
        <member name="P:MM.Helper.Models.IdenticalModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.DifferentModel">
            <summary>
            验证两个参数是否不同
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DifferentModel.Field">
            <summary>
            比较字段
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DifferentModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.ExtensionModel">
            <summary>
            验证参数后缀名
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ExtensionModel.Format">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ExtensionModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.DataTypeModel">
            <summary>
            验证参数类型 
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DataTypeModel.Format">
            <summary>
            格式，array、object、string、bool、dateTime、date、time、float、decimal、double、long、int
            </summary>
        </member>
        <member name="P:MM.Helper.Models.DataTypeModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.RuleModel">
            <summary>
            规则验证模型（用于后缀名、特定格式、或正则验证）
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RuleModel.Format">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RuleModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RuleModel.Url">
            <summary>
            外网验证地址
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RuleModel.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:MM.Helper.Models.RuleModel.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:MM.Helper.Models.EqualModel">
            <summary>
            比较验证模型（用于校验两个参数相同或不同）
            </summary>
        </member>
        <member name="P:MM.Helper.Models.EqualModel.Field">
            <summary>
            比较的字段
            </summary>
        </member>
        <member name="P:MM.Helper.Models.EqualModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Models.ParamModel">
            <summary>
            参数模型
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Filter">
            <summary>
            是否过滤该参数——当选择了过滤该参数，在验证后将会删除该参数。
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Split">
            <summary>
            分割字符串,用于多参数查询
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.DataType">
            <summary>
            是否空值验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.NotEmpty">
            <summary>
            是否空值验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.DateTime">
            <summary>
            时间验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Remote">
            <summary>
            远程验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Regex">
            <summary>
            正则验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.StrLen">
            <summary>
            字符串验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Range">
            <summary>
            范围值验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Identical">
            <summary>
            两个参数是否相同
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Different">
            <summary>
            两个参数是否不同
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.Extension">
            <summary>
            后缀名验证
            </summary>
        </member>
        <member name="P:MM.Helper.Models.ParamModel.SubParam">
            <summary>
            子验证模型，用于验证数组成员或对象
            </summary>
        </member>
        <member name="T:MM.Helper.Models.PathModel">
            <summary>
            路径模型
            </summary>
        </member>
        <member name="M:MM.Helper.Models.PathModel.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="runPath">程序运行路径</param>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Root">
            <summary>
            程序根目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Web">
            <summary>
            站点目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Script">
            <summary>
            脚本目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Static">
            <summary>
            静态文件目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Upload">
            <summary>
            上传目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Template">
            <summary>
            模板文件目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Cache">
            <summary>
            缓存文件目录
            </summary>
        </member>
        <member name="P:MM.Helper.Models.PathModel.Config">
            <summary>
            配置文件目录
            </summary>
        </member>
        <member name="T:MM.Helper.Net.Api">
            <summary>
            接口请求
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Api.Host">
            <summary>
            接口请求主机地址
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Api.PostApi``1(System.String,System.Object)">
            <summary>
            Post请求
            </summary>
            <param name="path">请求路径</param>
            <param name="param">请求参数</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Api.GetApi``1(System.String,System.Object)">
            <summary>
            Get请求
            </summary>
            <param name="path">路径</param>
            <param name="param">参数</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Api.HttpPost(System.String,System.Object)">
            <summary>
            post通用接口
            </summary>
            <param name="path">路径</param>
            <param name="param">参数</param>
            <returns>返回响应结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Api.HttpGet(System.String,System.Object)">
            <summary>
            get通用接口
            </summary>
            <param name="path">路径</param>
            <param name="param">参数</param>
            <returns>返回响应结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Api.Rpc(System.String,System.Object,System.String)">
            <summary>
            Rpc请求
            </summary>
            <param name="method">方法</param>
            <param name="param">参数</param>
            <param name="id">序号</param>
            <returns>返回响应结果模型</returns>
        </member>
        <member name="T:MM.Helper.Net.ReqModel">
            <summary>
            Rpc请求模型
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ReqModel.JsonRPC">
            <summary>
            rpc版本
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ReqModel.ID">
            <summary>
            请求序号
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ReqModel.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ReqModel.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:MM.Helper.Net.ResModel">
            <summary>
            响应模型
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ResModel.JsonRPC">
            <summary>
            rpc版本
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ResModel.ID">
            <summary>
            请求序号
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ResModel.Result">
            <summary>
            响应结果
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ResModel.Error">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:MM.Helper.Net.ErrorModel">
            <summary>
            错误模型
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ErrorModel.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ErrorModel.Message">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:MM.Helper.Net.ArticleModel">
            <summary>
            文章模型
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleModel.Title">
            <summary>
            文章标题
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleModel.Content">
            <summary>
            正文文本
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleModel.Html">
            <summary>
            带标签正文
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleModel.CreateTime">
            <summary>
            文章发布时间
            </summary>
        </member>
        <member name="T:MM.Helper.Net.ArticleHelper">
            <summary>
            文章提取帮助类
            解析Html页面的文章正文内容,基于文本密度的HTML正文提取类
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleHelper.AppendMode">
            <summary>
            是否使用追加模式，默认为false
            使用追加模式后，会将符合过滤条件的所有文本提取出来
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleHelper.Depth">
            <summary>
            按行分析的深度，默认为6
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleHelper.LimitCount">
            <summary>
            字符限定数，当分析的文本数量达到限定数则认为进入正文内容
            默认180个字符数
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ArticleHelper.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.Article(System.String)">
            <summary>
            从给定的Html原始文本中获取正文信息
            </summary>
            <param name="html">网页内容</param>
            <returns>文章模型</returns>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.FormatTag(System.Text.RegularExpressions.Match)">
            <summary>
            格式化标签，剔除匹配标签中的回车符
            </summary>
            <param name="match">正则表达式</param>
            <returns>返回正则</returns>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.ArticleTitle(System.String)">
            <summary>
            获取文章标题
            </summary>
            <param name="html">网页内容</param>
            <returns>返回文章标题</returns>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.ArticleTime(System.String)">
            <summary>
            获取文章发布日期
            </summary>
            <param name="html">网页内容</param>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.GetContent(System.String,System.String@,System.String@)">
            <summary>
            从body标签文本中分析正文内容
            </summary>
            <param name="bodyText">只过滤了script和style标签的body文本内容</param>
            <param name="content">返回文本正文，不包含标签</param>
            <param name="contentS">返回文本正文包含标签</param>
        </member>
        <member name="M:MM.Helper.Net.ArticleHelper.FixUrl(System.String,System.String)">
            <summary>
            基于baseUrl，补全html代码中的链接
            </summary>
            <param name="baseUrl"></param>
            <param name="html"></param>
        </member>
        <member name="T:MM.Helper.Net.Email">
            <summary>
            Email帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.IsSSL">
            <summary>
            是否使用SSL
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.Smtp">
            <summary>
            smtp地址
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.Nick">
            <summary>
            邮件昵称
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.MyEmail">
            <summary>
            自己的邮件地址
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.Username">
            <summary>
            登录用户名
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Email.Password">
            <summary>
            登录密码
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Email.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Email.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="myEmail">自己的邮件地址</param>
            <param name="nick">邮件昵称</param>
            <param name="username">登录用户名</param>
            <param name="password">登录密码</param>
            <param name="smtp">smtp地址</param>
        </member>
        <member name="M:MM.Helper.Net.Email.Init(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="myEmail">自己的邮件地址</param>
            <param name="nick">邮件昵称</param>
            <param name="username">登录用户名</param>
            <param name="password">登录密码</param>
            <param name="smtp">smtp地址</param>
        </member>
        <member name="M:MM.Helper.Net.Email.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="email">邮箱</param>
            <param name="title">标题</param>
            <param name="content">内容</param>
            <param name="CopyEmail">抄送邮箱</param>
            <param name="isBodyHtml">是否Html格式的邮件</param>
            <returns>发送成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Net.Ftp">
            <summary>
            Ftp传输帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Host">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Port">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Dir">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Connected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Ftp.Encode">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.socket">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.buffer">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.obj">
            <summary>
            传输对象
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="host">远程主机地址</param>
            <param name="dir">远程路径</param>
            <param name="username">远程登录用户名</param>
            <param name="password">远程登录密码</param>
            <param name="port">远程端口</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Connect">
            <summary>
            建立连接 
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="T:MM.Helper.Net.Ftp.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.TransferType.Binary">
            <summary>
            二进制模式
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Ftp.TransferType.ASCII">
            <summary>
            ASCII模式
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.SetType(System.String)">
            <summary>
            设置传输模式
            </summary>
            <param name="type">传输模式</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.SetTransferType(MM.Helper.Net.Ftp.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:MM.Helper.Net.Ftp.GetDir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="search">文件名的匹配字符串</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.NewPutByGuid(System.String,System.String)">
            <summary>
            新的传输标识符
            </summary>
            <param name="file">文件名</param>
            <param name="guid">全局唯一标识符</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="file">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:MM.Helper.Net.Ftp.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="file">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Del(System.String)">
            <summary>
            删除
            </summary>
            <param name="file">待删除文件名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Move(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="file_old">旧文件名</param>
            <param name="file_new">新文件名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Download(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="search">文件名的匹配字符串</param>
            <param name="dir">本地目录(不得以\结束)</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Download(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="file">要下载的文件名</param>
            <param name="dir">本地目录(不得以\结束)</param>
            <param name="localFile">保存在本地时的文件名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="file">要下载的文件名</param>
            <param name="dir">本地目录(不得以\结束)</param>
            <param name="localFile">保存在本地时的文件名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Upload(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="dir">本地目录(不得以\结束)</param>
            <param name="search">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Upload(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="localFile">本地文件名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.UploadByGuid(System.String,System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="localFile">本地文件名</param>
            <param name="guid">全局唯一标识符</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.AddDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">目录名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.DelDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dir">目录名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.SetDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="dir">新的工作目录名</param>
        </member>
        <member name="M:MM.Helper.Net.Ftp.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg,应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.CreateSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:MM.Helper.Net.Ftp.Close">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Ftp.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:MM.Helper.Net.Ftp.SendCmd(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="cmd">命令</param>
        </member>
        <member name="T:MM.Helper.Net.Html">
            <summary>
            Html解析帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Html.GetA(System.String,System.String)">
            <summary>
            获取网页中所有A链接
            </summary>
            <param name="html">网页内容</param>
            <param name="baseUrl">基础网址</param>
            <returns>返回所有A链接对象模型</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetImg(System.String,System.String)">
            <summary>
            获取网页所有图片
            </summary>
            <param name="html">网页内容</param>
            <param name="baseUrl">基础网址</param>
            <returns>返回图片信息模型列表</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Title(System.String)">
            <summary>
            获取网页标题部分
            </summary>
            <param name="html">网页内容</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Enconde(System.String)">
            <summary>
            获取网页编码方式
            </summary>
            <param name="html">网页内容</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Description(System.String)">
            <summary>
            获取网页描述
            </summary>
            <param name="html">网页内容</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Author(System.String)">
            <summary>
            获取网页开发者
            </summary>
            <param name="html">网页内容</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Keywords(System.String)">
            <summary>
            获取网页关键词
            </summary>
            <param name="html">网页内容</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Between(System.String,System.String,System.String)">
            <summary>
            取某HTML标签之间能的内容
            </summary>
            <param name="html">网页内容</param>
            <param name="s">开始标签</param>
            <param name="e">结束标签</param>
            <returns>返回标签之间的内容</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetContent(System.String,System.String)">
            <summary>
            获取网页中某个部分的内容
            </summary>
            <param name="html">网页内容</param>
            <param name="regex">正则表达式</param>
            <returns>返回网页标题</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.NewAList">
            <summary>
            新建链接列表
            </summary>
            <returns>返回A链接列表</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.NewImgList">
            <summary>
            新建图片列表
            </summary>
            <returns>返回A链接列表</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.DownloadImg(System.String,System.String)">
            <summary>
            下载图片
            </summary>
            <param name="imgSrc">图片</param>
            <param name="path">保存路径</param>
            <returns>下载图片</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.DownloadImg(System.Collections.Generic.List{MM.Helper.Net.ImgItem},System.String)">
            <summary>
            下载所有图片
            </summary>
            <param name="list">图片列表</param>
            <param name="path">保存路径</param>
            <returns>下载图片</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.DownloadImgS(System.Collections.Generic.List{MM.Helper.Net.ImgItem},System.String,System.String)">
            <summary>
            下载所有图片
            </summary>
            <param name="list">图片列表</param>
            <param name="path">保存路径</param>
            <param name="url">新的访问地址</param>
            <returns>下载图片</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="file">获取文件名</param>
            <returns>返回文件名</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetTag(System.String,System.String)">
            <summary>
            获取指定对象文本
            </summary>
            <param name="html">html内容</param>
            <param name="tag">标签</param>
            <returns>返回文本列表</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetMatch(System.String,System.String,System.Int32)">
            <summary>
            取匹配正则的字符串
            </summary>
            <param name="str">被取字符串</param>
            <param name="rx">正则表达式</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.FilterHtml(System.String)">
            <summary>
            过滤次要的html
            </summary>
            <param name="html">网页内容</param>
            <returns>返回html</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.NoHtml(System.String)">
            <summary>   
            清除HTML标记   
            </summary>   
            <param name="Htmlstring">包括HTML的源码</param>   
            <returns>已经去除后的文字</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.ReplaceTag(System.String,System.Int32)">
            <summary>
            移除html标签
            </summary>
            <param name="html">html文本</param>
            <param name="length">取出长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.ReplaceNewLine(System.String)">
            <summary>
            替换新行
            </summary>
            <param name="html">网页内容</param>
            <returns>返回替换后内容</returns>
        </member>
        <member name="P:MM.Helper.Net.Html.NetworkDelay">
            <summary>
            网络延迟
            </summary>
        </member>
        <member name="P:MM.Helper.Net.Html.MaxTry">
            <summary>
            最大尝试数
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Html.Encode(System.String)">
            <summary>
            替换html中的特殊字符
            </summary>
            <param name="theString">需要进行替换的文本</param>
            <returns>替换完的文本。</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.Decode(System.String)">
            <summary>
            恢复html中的特殊字符
            </summary>
            <param name="theString">需要恢复的文本</param>
            <returns>恢复好的文本。</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.GetHref(System.String)">
            <summary>
            获取页面的链接正则
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Html.GetImgSrc(System.String,System.String)">
            <summary>
            匹配页面的图片地址
            </summary>
            <param name="HtmlCode">html代码</param>
            <param name="imgHttp">要补充的http://路径信息</param>
        </member>
        <member name="M:MM.Helper.Net.Html.GetImgOne(System.String,System.String)">
            <summary>
            匹配<img src="" />中的图片路径实际链接
            </summary>
            <param name="ImgString">图片字符串</param>
            <param name="imgHttp">图片链接地址。如http://localhost/</param>
            <returns>返回完整链接的图片地址</returns>
        </member>
        <member name="M:MM.Helper.Net.Html.ZipHtml(System.String)">
            <summary>
            压缩HTML输出
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Html.DelHtml(System.String,System.String)">
            <summary>
            过滤指定HTML标签
            </summary>
            <param name="s_TextStr">要过滤的字符</param>
            <param name="html_Str">a img p div</param>
        </member>
        <member name="T:MM.Helper.Net.AItem">
            <summary>
            网页A链接模型
            </summary>
        </member>
        <member name="P:MM.Helper.Net.AItem.Href">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:MM.Helper.Net.AItem.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="P:MM.Helper.Net.AItem.Img">
            <summary>
            图片
            </summary>
        </member>
        <member name="P:MM.Helper.Net.AItem.Html">
            <summary>
            html内容
            </summary>
        </member>
        <member name="P:MM.Helper.Net.AItem.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:MM.Helper.Net.ImgItem">
            <summary>
            图片项
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ImgItem.Src">
            <summary>
            图片地址
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ImgItem.Html">
            <summary>
            图片html
            </summary>
        </member>
        <member name="P:MM.Helper.Net.ImgItem.NewHtml">
            <summary>
            新图片html
            </summary>
        </member>
        <member name="T:MM.Helper.Net.AType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:MM.Helper.Net.AType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:MM.Helper.Net.AType.Img">
            <summary>
            图片
            </summary>
        </member>
        <member name="T:MM.Helper.Net.Https">
            <summary>
            Http请求帮助类
            </summary>
        </member>
        <member name="F:MM.Helper.Net.Https.Headers">
            <summary>
            协议头
            </summary>
        </member>
        <member name="M:MM.Helper.Net.Https.UrlEncode(System.String,System.String)">
            <summary>
            编码
            </summary>
            <param name="query">参数</param>
            <param name="encode">编码方式</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Net.Https.UrlDecode(System.String,System.String)">
            <summary>
            解码
            </summary>
            <param name="query">参数</param>
            <param name="encode">解码方式</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:MM.Helper.Net.Https.Http(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            http请求
            </summary>
            <param name="method">方法</param>
            <param name="url">请求网址</param>
            <param name="query">url参数</param>
            <param name="body">post请求参数</param>
            <param name="contentType">请求内容类型</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Https.Post(System.String,System.String,System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">请求网址</param>
            <param name="body">post主体参数</param>
            <param name="contentType">请求内容类型</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Https.Get(System.String,System.String,System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">请求网址</param>
            <param name="query">url参数</param>
            <param name="contentType">请求内容类型</param>
            <returns>返回请求结果</returns>
        </member>
        <member name="M:MM.Helper.Net.Https.Format(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="str">字符串</param>
            <param name="pms">参数</param>
            <returns>返回格式化后的字符串</returns>
        </member>
        <member name="T:MM.Helper.Net.DictionarySort">
            <summary>
            字典排序
            </summary>
        </member>
        <member name="M:MM.Helper.Net.DictionarySort.Compare(System.Object,System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj1">左边对象</param>
            <param name="obj2">右边对象</param>
            <returns>返回序号较小值</returns>
        </member>
        <member name="T:MM.Helper.Net.MsgCrypt">
            <summary>
            字节转换类
            </summary>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.HostToNetworkOrder(System.UInt32)">
            <summary>
            主机网络秩序
            </summary>
            <param name="inval"></param>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.HostToNetworkOrder(System.Int32)">
            <summary>
            主机网络秩序
            </summary>
            <param name="inval"></param>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.AES_decrypt(System.String,System.String,System.String@)">
            <summary>
            解密
            </summary>
            <param name="Input">密文</param>
            <param name="EncodingAESKey">密文钥匙</param>
            <param name="appid">应用ID</param>
            <returns>返回解密内容</returns>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.AES_encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="Input">输入的内容</param>
            <param name="EncodingAESKey">加密钥匙</param>
            <param name="appid">应用ID</param>
            <returns>返回加密内容</returns>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.Chr(System.Int32)">
            将数字转化成ASCII码对应的字符，用于对明文进行补码
            
            @param a 需要转化的数字
            @return 转化得到的字符
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.EncodeSHA1(System.String)">
            <summary>
            SHA1哈希值加密
            </summary>
            <param name="str">字符串</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:MM.Helper.Net.MsgCrypt.CheckSignature(System.String,System.String,System.String,System.String)">
            <summary>
            验证验证签名（可用于验证微信）
            </summary>
            * 将token、timestamp、nonce三个参数进行字典序排序
            * 将三个参数字符串拼接成一个字符串进行sha1加密
            * 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。
            <returns>验证成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Sys.Cmd">
            <summary>
            命令提示符帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Cmd.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="F:MM.Helper.Sys.Cmd.python">
            <summary>
            python程序目录
            </summary>
        </member>
        <member name="F:MM.Helper.Sys.Cmd.node">
            <summary>
            node程序目录
            </summary>
        </member>
        <member name="F:MM.Helper.Sys.Cmd.lua">
            <summary>
            lua脚本目录
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Init">
            <summary>
            初始化
            </summary>
            <returns>初始化成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.GetNodeJs">
            <summary>
            获取nodeJS脚本
            </summary>
            <returns>返回脚本代码</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.GetPython">
            <summary>
            获取python脚本
            </summary>
            <returns>返回脚本代码</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.GetLua">
            <summary>
            获取Lua脚本
            </summary>
            <returns>返回脚本代码</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Execute(System.String,System.Int32)">
            <summary>
            执行DOS命令，返回DOS命令的输出
            </summary>
            <param name="command">dos命令</param>
            <param name="seconds">等待命令执行的时间（单位：毫秒），如果设定为0，则无限等待</param>  
            <returns>返回DOS命令的输出</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.RunJs(System.String,System.String,System.String,System.String)">
            <summary>
            执行NodeJS脚本
            </summary>
            <param name="file">文件名</param>
            <param name="fun">函数名</param>
            <param name="param">参数1</param>
            <param name="paramB">参数2</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.RunPython(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            执行Python脚本
            </summary>
            <param name="file">文件名</param>
            <param name="fun">函数名</param>
            <param name="param">参数1</param>
            <param name="paramB">参数2</param>
            <param name="bl">是否编译</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.RunLua(System.String,System.String,System.String,System.String)">
            <summary>
            执行Lua脚本
            </summary>
            <param name="file">文件名</param>
            <param name="fun">函数名</param>
            <param name="param">参数1</param>
            <param name="paramB">参数2</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Python(System.String,System.Int32)">
            <summary>
            执行python
            </summary>
            <param name="command">脚本</param>
            <param name="seconds">等待时间</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Node(System.String,System.Int32)">
            <summary>
            执行NodeJS
            </summary>
            <param name="command">NodeJS命令</param>
            <param name="seconds">等待时间</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Js(System.String,System.Int32)">
            <summary>
            执行NodeJS
            </summary>
            <param name="command">NodeJS命令</param>
            <param name="seconds">等待时间</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Npm(System.String,System.Int32)">
            <summary>
            执行Npm
            </summary>
            <param name="command">Npm指令</param>
            <param name="seconds">等待时间</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.Lua(System.String,System.Int32)">
            <summary>
            执行Lua脚本
            </summary>
            <param name="command">lua指令</param>
            <param name="seconds">等待时间</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:MM.Helper.Sys.Cmd.App(System.String,System.Int32,System.String)">
            <summary>
            运行程序
            </summary>
            <param name="command">指令</param>
            <param name="seconds">等待时间</param>
            <param name="file">程序文件</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="T:MM.Helper.Sys.Dir">
            <summary>
            目录帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Dir.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Add(System.String)">
            <summary>
            遍历创建目录
            </summary>
            <param name="dir">目录路径</param>
            <returns>遍历创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Del(System.String,System.Boolean)">
            <summary>
            删除目录
            </summary>
            <param name="dir">目录路径</param>
            <param name="all">是否删除子目录和文件</param>
            <returns>如果存在则返回true，否则返回fales</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Set(System.String,System.String)">
            <summary>
            修改目录名
            </summary>
            <param name="dir">目录路径</param>
            <param name="name">新名称</param>
            <returns>修改成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Get(System.String,System.Boolean)">
            <summary>
            获取目录下所有文件及目录
            </summary>
            <param name="dir">目录路径</param>
            <param name="onlyDir">是否仅获取目录</param>
            <returns>返回所有子目录列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Has(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="dir">目录路径</param>
            <returns>如果存在则返回true，否则返回fales</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Move(System.String,System.String)">
            <summary>
            移动目录
            </summary>
            <param name="dir">源目录</param>
            <param name="dir2">移动后目录</param>
            <returns>移动成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.Info(System.String)">
            <summary>
            获取目录信息
            </summary>
            <param name="dir">目录路径</param>
            <returns>返回目录信息 </returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.SubInfo(System.String)">
            <summary>
            获取所有子目录信息
            </summary>
            <param name="dir">目录路径</param>
            <returns>返回所有子目录信息列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.EachAdd(System.String)">
            <summary>
            遍历创建目录
            </summary>
            <param name="dir">目录路径</param>
            <returns>遍历创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.EachGet(System.String)">
            <summary>
            遍历创建目录
            </summary>
            <param name="dir">目录路径</param>
            <returns>遍历创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Dir.EachGet(System.IO.DirectoryInfo)">
            <summary>
            获取当前目录及所有子目录下的文件
            </summary>
            <param name="root">当前目录</param>
            <returns>返回文件列表</returns>
        </member>
        <member name="T:MM.Helper.Sys.Files">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Files.Ex">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Files.Dir">
            <summary>
            定点路径
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Files.Extension">
            <summary>
            拓展名
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Files.Load(System.String,System.String)">
            <summary>
            读取文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码方式</param>
            <returns>返回文件内容</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Save(System.String,System.String,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码方式</param>
            <param name="content">文件内容</param>
        </member>
        <member name="M:MM.Helper.Sys.Files.Copy(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="newFileName">新文件位置</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="newFileName">移动后的文件位置</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.ToFullName(System.String,System.String)">
            <summary>
            转为文件全名
            </summary>
            <param name="fileName">文件名</param>
            <param name="dir">基础路径</param>
            <returns>返回文件全名</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Add(System.String,System.String)">
            <summary>
            添加文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容</param>
            <returns>添加成功返回true，失败返回fales</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Del(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Set(System.String,System.String)">
            <summary>
            修改文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容</param>
            <returns>修改成功返回true，失败返回fales</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Get(System.String,System.String)">
            <summary>
            获取目录下所有文件
            </summary>
            <param name="dir">目录路径</param>
            <param name="search">只搜索匹配的文件类型</param>
            <returns>返回文件列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Has(System.String)">
            <summary>
            判断文件是否有
            </summary>
            <param name="file">文件路径</param>
            <returns>有则返回true，没有则返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.LoadByte(System.String)">
            <summary>
            读取内容
            </summary>
            <param name="fileName">文件名</param>
            <returns>返回读取的内容</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Info(System.String,System.String)">
            <summary>
            获取目录下所有文件信息
            </summary>
            <param name="dir">目录路径 </param>
            <param name="search">只搜索匹配的文件类型</param>
            <returns>返回文件信息列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.Name(System.String,System.Boolean)">
            <summary>
            获取文件名部分
            </summary>
            <param name="fileName">文件全名</param>
            <param name="ext">是否保留拓展名</param>
            <returns>返回文件名</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachLoad(System.String,System.String)">
            <summary>
            遍历读取文件
            </summary>
            <param name="path">路径</param>
            <param name="extension">拓展名</param>
            <returns>返回全名加内容模型列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachLoad(System.IO.DirectoryInfo)">
            <summary>
            遍历读取文件
            </summary>
            <param name="root">根路径</param>
            <returns>返回全名加内容模型列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachLoad``1(System.String,System.String)">
            <summary>
            遍历读取文件
            </summary>
            <param name="path">根路径</param>
            <param name="extension">拓展名</param>
            <returns>返回全名加内容模型列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachLoad``1(System.IO.DirectoryInfo)">
            <summary>
            遍历读取文件
            </summary>
            <param name="root">根路径</param>
            <returns>返回全名加内容模型列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachGet(System.String,System.String)">
            <summary>
            获取当前目录及所有子目录下的文件
            </summary>
            <param name="path">目录路径</param>
            <param name="extension">只搜索匹配的文件类型</param>
            <returns>返回文件列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.EachGet(System.IO.DirectoryInfo)">
            <summary>
            获取当前目录及所有子目录下的文件
            </summary>
            <param name="root">当前目录</param>
            <returns>返回文件列表</returns>
        </member>
        <member name="M:MM.Helper.Sys.Files.ToDir(System.String)">
            <summary>
            获取文件路径
            </summary>
            <returns>返回文件路径</returns>
        </member>
        <member name="T:MM.Helper.Sys.FilesModel">
            <summary>
            文件模型
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.FilesModel.FullName">
            <summary>
            文件全名
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.FilesModel.Content">
            <summary>
            文件内容
            </summary>
        </member>
        <member name="T:MM.Helper.Sys.Log">
            <summary>
            日志输出帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Log.Dir">
            <summary>
            存储路径
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Log.Ex">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Log.Init">
            <summary>
            初始化
            </summary>
            <returns>初始化成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Log.Save(System.String)">
            <summary>
            写出所有内容
            </summary>
            <param name="content">内容</param>
            <returns>写出成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Log.Read">
            <summary>
            读取所有内容
            </summary>
            <returns>读取成功返回内容，</returns>
        </member>
        <member name="M:MM.Helper.Sys.Log.Clear">
            <summary>
            清除所有信息
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Log.Output(System.Object)">
            <summary>
            日志输出
            </summary>
            <param name="obj">写出的内容</param>
            <returns>写出成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Log.WriteLine(System.Object)">
            <summary>
            写出文本行
            </summary>
            <param name="obj">写出的内容</param>
            <returns>写出成功返回true，失败返回false</returns>
        </member>
        <member name="T:MM.Helper.Sys.Speed">
            <summary>
            性能测试帮助类
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Speed.Start">
            <summary>
            重新启动
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Speed.Stop(System.String)">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Speed.End(System.String)">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:MM.Helper.Sys.Zip">
            <summary>
            Zip压缩帮助类
            </summary>
        </member>
        <member name="P:MM.Helper.Sys.Zip.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:MM.Helper.Sys.Zip.GetAllFies(System.String)">
            <summary>  
            获取所有文件  
            </summary>  
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Sys.Zip.GetAllDirsFiles(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.Collections.Generic.Dictionary{System.String,System.DateTime})">
            <summary>  
            获取一个文件夹下的所有文件夹里的文件  
            </summary>  
            <param name="dirs"></param>  
            <param name="dict"></param>
        </member>
        <member name="M:MM.Helper.Sys.Zip.GetAllDirFiles(System.IO.DirectoryInfo,System.Collections.Generic.Dictionary{System.String,System.DateTime})">
            <summary>  
            获取一个文件夹下的文件  
            </summary>  
            <param name="dir">目录名称</param>
            <param name="dict">文件列表HastTable</param>  
        </member>
        <member name="M:MM.Helper.Sys.Zip.ZipDir(System.String,System.String,System.String,System.Int32)">
            <summary>
            压缩文件夹
            </summary>
            <param name="dir">文件夹</param>
            <param name="zipFile">压缩后的文件名</param>
            <param name="password">压缩密码</param>
            <param name="level">压缩率0（无压缩）9（压缩率最高）</param>
        </member>
        <member name="M:MM.Helper.Sys.Zip.UnZip(System.String,System.String)">
            <summary>  
            解压zip格式的文件  
            </summary>  
            <param name="zipFile">压缩文件路径</param>
            <param name="dir">解压文件存放路径,为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹</param>  
            <returns>解压是否成功</returns>
        </member>
        <member name="M:MM.Helper.Sys.Zip.ZipFile(System.String,System.String,System.String,System.Int32)">
            <summary> 
            压缩单个文件 
            </summary> 
            <param name="file">要进行压缩的文件名，全路径</param> 
            <param name="zipFile">压缩后生成的压缩文件名,全路径</param>
            <param name="password">压宿密码</param>
            <param name="level">压缩级别</param>
        </member>
        <member name="M:MM.Helper.Sys.Zip.ZipMore(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32)">
            <summary>
            压缩多个目录或文件
            </summary>
            <param name="DirOrFileList">待压缩的文件夹或者文件，全路径格式,是一个集合</param>
            <param name="zipFile">压缩后的文件名，全路径格式</param>
            <param name="password">压宿密码</param>
            <param name="level">压缩级别</param>
            <returns>压缩成功返回true，失败返回false</returns>
        </member>
        <member name="M:MM.Helper.Sys.Zip.ZipFileStream(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            带压缩流压缩单个文件
            </summary>
            <param name="file">要进行压缩的文件名</param>
            <param name="zipOutput"></param>
            <returns></returns>
        </member>
        <member name="M:MM.Helper.Sys.Zip.ZipFileDir(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归压缩文件夹
            </summary>
            <param name="dir">文件夹</param>
            <param name="zipOutput">zip输出流</param>
            <param name="parentDir">父文件夹的名字</param>
        </member>
        <member name="T:System.Cache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="F:System.Cache.runPath">
            <summary>
            运行路径
            </summary>
        </member>
        <member name="P:System.Cache.RunPath">
            <summary>
            运行路径
            </summary>
        </member>
        <member name="F:System.Cache.path">
            <summary>
            路径模型
            </summary>
        </member>
        <member name="P:System.Cache.Path">
            <summary>
            路径模型
            </summary>
        </member>
        <member name="F:System.Cache._Theme">
            <summary>
            模板主题风格
            </summary>
        </member>
        <member name="P:System.Cache.Theme">
            <summary>
            模板主题风格
            </summary>
        </member>
        <member name="F:System.Cache.req">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:System.Cache.Req">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="M:System.Cache.GetReq(System.String)">
            <summary>
            获取请求参数
            </summary>
            <param name="tag">标签</param>
            <returns>返回请求参数</returns>
        </member>
        <member name="M:System.Cache.SetReq(System.String,System.Object)">
            <summary>
            设置请求参数
            </summary>
            <param name="tag">标签</param>
            <param name="reqM">请求参数</param>
            <returns>设置成功返回true，是失败返回false</returns>
        </member>
        <member name="M:System.Cache.DelReq(System.String)">
            <summary>
            删除请求参数
            </summary>
            <param name="tag">标签</param>
            <returns>返回请求参数</returns>
        </member>
        <member name="F:System.Cache.res">
            <summary>
            响应结果
            </summary>
        </member>
        <member name="P:System.Cache.Res">
            <summary>
            响应结果
            </summary>
        </member>
        <member name="M:System.Cache.GetRes(System.String)">
            <summary>
            获取响应结果
            </summary>
            <param name="tag">标签</param>
            <returns>返回响应结果</returns>
        </member>
        <member name="M:System.Cache.SetRes(System.String,System.Object)">
            <summary>
            设置响应结果
            </summary>
            <param name="tag">标签</param>
            <param name="resM">响应结果</param>
            <returns>设置成功返回true，是失败返回false</returns>
        </member>
        <member name="M:System.Cache.DelRes(System.String)">
            <summary>
            删除响应结果
            </summary>
            <param name="tag">标签</param>
            <returns>返回响应结果</returns>
        </member>
        <member name="T:System.Collections.Generic.DictExpand">
            <summary>
            字典拓展函数
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.Left``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            左合并 —— 只返回左边字典有的
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict1">字典1</param>
            <param name="dict2">字典2</param>
            <returns>返回新字典</returns>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.GetKeys``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            获取键列表
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dt">字典</param>
            <returns>返回键列表</returns>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.Right``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            右合并 —— 返回右边所有及左边独有的
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict1">字典1</param>
            <param name="dict2">字典2</param>
            <returns>返回新字典</returns>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.Has``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            判断键是否存在
            </summary>
            <typeparam name="T">返回</typeparam>
            <param name="dict1">字典</param>
            <param name="key">键</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.AddOrSet``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,``0)">
            <summary>
            添加或修改
            </summary>
            <typeparam name="T">返回</typeparam>
            <param name="dict1">字典</param>
            <param name="key">键</param>
            <param name="m">值</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.DictExpand.Get``1(System.Collections.Generic.Dictionary{System.String,``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dt">字典</param>
            <param name="key">键</param>
            <returns>返回值</returns>
        </member>
        <member name="T:System.Collections.Generic.ListExpand">
            <summary>
            列表拓展函数
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.GetStr``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.GetInt``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Sum``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.GetValues``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Get``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.GetFirst``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            获取值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>返回所有对应键值</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Set``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            设置值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.SetFirst``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            设置值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Del``1(System.Collections.Generic.List{``0},System.String,System.Object)">
            <summary>
            删除值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.DelFirst``1(System.Collections.Generic.List{``0},System.String,System.Object)">
            <summary>
            删除值——第一个匹配对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.AddOrSet``1(System.Collections.Generic.List{``0},System.String,``0)">
            <summary>
            添加或修改
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="m">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Add``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            追加对象（通过列表方式）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">当前列表</param>
            <param name="list_new">追加列表</param>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Has``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            判断值是否已存在
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="key">对应键</param>
            <param name="value">判断值</param>
            <returns>存在返回true，不存在返回false</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            拆分数组
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表或数组</param>
            <param name="size">查分大小</param>
            <returns>返回二维数组</returns>
        </member>
        <member name="M:System.Collections.Generic.ListExpand.ToStr``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            转字符串
            </summary>
        </member>
        <member name="T:System.EncodeExpand">
            <summary>
            字符串拓展函数
            </summary>
        </member>
        <member name="M:System.EncodeExpand.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.HtmlEncode(System.String)">
            <summary>
            Html编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.HtmlDecode(System.String)">
            <summary>
            Html解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.Utf8Encode(System.String)">
            <summary>
            Utf8编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.Utf8Decode(System.String)">
            <summary>
            Utf8解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.UnicodeEncode(System.String)">
            <summary>
            Unicode编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.UnicodeDecode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.AsciiEncode(System.String)">
            <summary>
            ASCII编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.AsciiDecode(System.String)">
            <summary>
            ASCII解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.Base64Encode(System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="str">被编码的字符串</param>
            <returns>返回编码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.Base64Decode(System.String)">
            <summary>
             Base64解码
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回解码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.ToEncode(System.String,System.String,System.String)">
            <summary>
            转换编码方式
            </summary>
            <param name="str">被转码的字符串</param>
            <param name="to_encoding">转换后的编码方式</param>
            <param name="from_encoding">当前的编码方式</param>
            <returns>转码后的字符串</returns>
        </member>
        <member name="M:System.EncodeExpand.ToEncode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            转换编码方式
            </summary>
            <param name="str">被转码的字符串</param>
            <param name="to_encoding">转换后的编码方式</param>
            <param name="from_encoding">当前的编码方式</param>
            <returns>转码后的字符串</returns>
        </member>
        <member name="T:System.EncryptExpand">
            <summary>
            加解密拓展类
            </summary>
        </member>
        <member name="P:System.EncryptExpand.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:System.EncryptExpand.Md5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">被解码的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.EncodeHash(System.String)">
            <summary>
            哈希加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.EncodeSHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.EncodeDES(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="str">被加密的字符串</param>
            <param name="key">密钥</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.DecodeDES(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="str">被解密的字符串</param>
            <param name="key">密钥</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.EncodeBase64(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="str">被加密的字符串</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.DecodeBase64(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="str">被解密的字符串</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.EncodeRSA(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="str">被加密的字符串</param>
            <param name="xmlPubKey">xml公钥</param>
            <returns>返回加密后的字符串</returns>
        </member>
        <member name="M:System.EncryptExpand.DecodeRSA(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="str">被解密的字符串</param>
            <param name="xmlKey">xml私钥</param>
            <returns>返回解密后的字符串</returns>
        </member>
        <member name="T:System.FileExpand">
            <summary>
            文件拓展
            </summary>
        </member>
        <member name="M:System.FileExpand.ToFullName(System.String,System.String)">
            <summary>
            转为文件全名
            </summary>
            <param name="fileName">文件名</param>
            <param name="dir">当前路径</param>
            <returns>返回文件全名</returns>
        </member>
        <member name="M:System.FileExpand.ToDir(System.String)">
            <summary>
            获取文件路径
            </summary>
            <returns>返回文件路径</returns>
        </member>
        <member name="T:System.ObjectExpand">
            <summary>
            对象拓展函数
            </summary>
        </member>
        <member name="P:System.ObjectExpand.Ex">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:System.ObjectExpand.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            转为Json字符串
            </summary>
            <param name="obj">对象</param>
            <param name="format">是否格式化</param>
            <param name="noNull">是否去除空值</param>
            <returns>返回序列化后的字符串</returns>
        </member>
        <member name="M:System.ObjectExpand.ToObj``1(System.String)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="str">字符串</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToObj``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jToken">Json Token对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToObj``1(Newtonsoft.Json.Linq.JArray)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jarr">json数组</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToObj``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="jobj">json对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToObj``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            转为强名称对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dict">字典</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToDict(System.Object)">
            <summary>
            转为字典
            </summary>
            <param name="obj">对象</param>
            <returns>返回强名称对象</returns>
        </member>
        <member name="M:System.ObjectExpand.ToDecimal(System.Object)">
            <summary>
            转为decimal类型
            </summary>
            <param name="str">科学记数法字符串</param>
            <returns>返回decimal类型</returns>
        </member>
        <member name="M:System.ObjectExpand.ToInt(System.Object)">
            <summary>
            转为decimal类型
            </summary>
            <param name="str">科学记数法字符串</param>
            <returns>返回decimal类型</returns>
        </member>
        <member name="M:System.ObjectExpand.ToLong(System.Object)">
            <summary>
            转为decimal类型
            </summary>
            <param name="str">科学记数法字符串</param>
            <returns>返回decimal类型</returns>
        </member>
        <member name="M:System.ObjectExpand.ToXml(System.Object)">
            <summary>
            转为xml字符串
            </summary>
            <param name="obj">对象</param>
            <returns>返回xml字符串</returns>
        </member>
        <member name="M:System.ObjectExpand.ToXmlS(System.Object,System.String)">
            <summary>
            转为xml字符串——特别方法
            </summary>
            <param name="name">名称</param>
            <param name="obj">对象</param>
            <returns>返回xml字符串</returns>
        </member>
        <member name="M:System.ObjectExpand.SerializerB(System.Object)">
            <summary>
            超级序列化——转体
            </summary>
            <param name="obj">对象模型</param>
            <returns>返回Xml格式字符串</returns>
        </member>
        <member name="M:System.ObjectExpand.ToJArr(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns>返回Json数组</returns>
        </member>
        <member name="M:System.ObjectExpand.ToJObj(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns>返回Json数组</returns>
        </member>
        <member name="M:System.ObjectExpand.ToArr``1(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns>返回Json数组</returns>
        </member>
        <member name="M:System.ObjectExpand.ToArr(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns>返回Json数组</returns>
        </member>
        <member name="T:System.StringExpand">
            <summary>
            字符串拓展函数
            </summary>
        </member>
        <member name="M:System.StringExpand.Left(System.String,System.String,System.Boolean)">
            <summary>
            取文本左边内容
            </summary>
            <param name="str">被取字符串</param>
            <param name="l">被取字符串</param>
            <param name="bl">如果没有左边内容，是否返回原有内容</param>
            <returns>返回左边内容</returns>
        </member>
        <member name="M:System.StringExpand.Right(System.String,System.String,System.Boolean)">
            <summary>
            取文本右边内容
            </summary>
            <param name="str">被取字符串</param>
            <param name="r">索引字符串</param>
            <param name="bl">如果没有右边内容，是否返回原有内容</param>
            <returns>返回右边内容</returns>
        </member>
        <member name="M:System.StringExpand.Between(System.String,System.String,System.String,System.Boolean)">
            <summary>
            取文本中间内容
            </summary>
            <param name="str">原文本</param>
            <param name="l">左边文本</param>
            <param name="r">右边文本</param>
            <param name="bl">如果没有之间的内容，是否返回原有内容</param>
            <returns>返回中间文本内容</returns>
        </member>
        <member name="M:System.StringExpand.Loads``1(System.String)">
            <summary>
            返序列化
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="jsonStr">json字符串</param>
            <returns>返回模型</returns>
        </member>
        <member name="M:System.StringExpand.Loads(System.String)">
            <summary>
            返序列化
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns>返回模型</returns>
        </member>
        <member name="M:System.StringExpand.Replace(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            替换字符串
            </summary>
            <param name="str">源字符串</param>
            <param name="oldStr">需替换字符串</param>
            <param name="newStr">替换用的字符串 </param>
            <param name="num">替换次数</param>
            <param name="idx">替换的起始位置</param>
            <returns>返回替换后的字符串</returns>
        </member>
        <member name="M:System.StringExpand.ReplaceSymbol(System.String,System.String)">
            <summary>
            替换掉所有字符
            </summary>
            <param name="str">被替换字符串</param>
            <param name="newStr">用作替换的字符串</param>
            <returns>替换成功返回替换后字符串</returns>
        </member>
        <member name="M:System.StringExpand.ReplaceRx(System.String,System.String,System.String)">
            <summary>
            正则替换
            </summary>
            <param name="str">原字符串</param>
            <param name="rx">正则</param>
            <param name="newStr">替换后的字符</param>
            <returns>返回替换后的字符串</returns>
        </member>
        <member name="M:System.StringExpand.ReplaceNull(System.String)">
            <summary>
            过滤不可见字符
            </summary>
            <param name="str">字符串</param>
            <returns>返回新字符串</returns>
        </member>
        <member name="M:System.StringExpand.ToPIN(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            转为激活码
            </summary>
            <param name="str">被转换的字符串</param>
            <param name="length">分割长度</param>
            <param name="strat">开始位置</param>
            <param name="end">结束位置</param>
            <returns>返回激活码格式字符串</returns>
        </member>
        <member name="M:System.StringExpand.Split(System.String,System.String)">
            <summary>
            分割文本
            </summary>
            <param name="str">被分割的字符串</param>
            <param name="symbol">分隔符</param>
            <returns>返回分割后的字符串数组</returns>
        </member>
        <member name="M:System.StringExpand.Get(System.String,System.String,System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="str">被取的字符串</param>
            <param name="rx">正则数量</param>
            <param name="num">取出的数量</param>
            <returns>返回获取的列表</returns>
        </member>
        <member name="M:System.StringExpand.GetNum(System.String,System.Int32)">
            <summary>
            获取数字
            </summary>
            <param name="str">被取的字符串</param>
            <param name="num">取出的数量</param>
            <returns>返回获取的列表</returns>
        </member>
        <member name="M:System.StringExpand.GetEn(System.String,System.Int32)">
            <summary>
            取英文
            </summary>
            <param name="str">被取字符串</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:System.StringExpand.GetCh(System.String,System.Int32)">
            <summary>
            取汉字
            </summary>
            <param name="str">被取字符串</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:System.StringExpand.IsMatch(System.String,System.String)">
            <summary>
            是否匹配正则
            </summary>
            <param name="str">被匹配的字符串</param>
            <param name="rx">正则表达式 </param>
            <returns>匹配返回true，不匹配返回false</returns>
        </member>
        <member name="M:System.StringExpand.IsNumOrEn(System.String)">
            <summary>
            是否数字英文
            </summary>
            <param name="str">判断的字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:System.StringExpand.IsNum(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:System.StringExpand.IsEn(System.String)">
            <summary>
            判断是否英文
            </summary>
            <param name="str">字符串</param>
            <returns>是则返回true，否则返回false</returns>
        </member>
        <member name="M:System.StringExpand.IsCh(System.String)">
            <summary>
            判断是否为中文
            </summary>
            <param name="str">字符串</param>
            <returns>是中文返回true，不是返回false</returns>
        </member>
        <member name="M:System.StringExpand.Match(System.String,System.String,System.Int32)">
            <summary>
            取匹配正则的字符串
            </summary>
            <param name="str">被取字符串</param>
            <param name="rx">正则表达式</param>
            <param name="num">取出前几个</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:System.StringExpand.HasNum(System.String)">
            <summary>
            判断是否含数字
            </summary>
            <param name="str">字符串</param>
            <returns>含数字返回true，不是返回false</returns>
        </member>
        <member name="M:System.StringExpand.HasEn(System.String)">
            <summary>
            判断是否含英文
            </summary>
            <param name="str">字符串</param>
            <returns>含英文返回true，不是返回false</returns>
        </member>
        <member name="M:System.StringExpand.HasCh(System.String)">
            <summary>
            判断是否含中文
            </summary>
            <param name="str">字符串</param>
            <returns>含中文返回true，不是返回false</returns>
        </member>
        <member name="M:System.StringExpand.Rx(System.String,System.String)">
            <summary>
            取匹配正则的字符串
            </summary>
            <param name="str">被取字符串</param>
            <param name="rx">正则表达式</param>
            <returns>返回取出的字符串</returns>
        </member>
        <member name="M:System.StringExpand.As2(System.String,System.String)">
            <summary>
            取相似度
            </summary>
            <param name="text1">文本1</param>
            <param name="text2">文本2</param>
            <returns>返回相似值0-100</returns>
        </member>
        <member name="M:System.StringExpand.As(System.String,System.String)">
            <summary>
            获取两个字符串的相似度
            </summary>
            <param name="text1">第一个字符串</param>
            <param name="text2">第二个字符串</param>
            <returns>返回双精度相似值</returns>
        </member>
        <member name="T:System.TimeExpand">
            <summary>
            时间拓展函数
            </summary>
        </member>
        <member name="M:System.TimeExpand.ToStamp(System.DateTime)">
            <summary>
            转为秒数
            </summary>
            <param name="time">时间模型</param>
            <returns>返回秒数</returns>
        </member>
        <member name="M:System.TimeExpand.ToTime(System.Int64)">
            <summary>
            时间戳转时间类型
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:System.TimeExpand.ToTime(System.String)">
            <summary>
            时间字符串转时间类型
            </summary>
            <param name="str">时间字符串</param>
            <returns>返回时间类型</returns>
        </member>
        <member name="M:System.TimeExpand.Add(System.DateTime,System.Int32,System.String)">
            <summary>
            增减时间
            </summary>
            <param name="time">当前时间</param>
            <param name="n">添加的时长</param>
            <param name="type">添加的类型</param>
            <returns>返回增减后的时间</returns>
        </member>
        <member name="M:System.TimeExpand.ToStampB(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式 - 取反
            </summary>
            <param name="time">时间对象</param>
            <returns>返回时间戳</returns>
        </member>
        <member name="M:System.TimeExpand.Interval(System.DateTime,System.DateTime,System.String)">
            <summary>
            比较相差多少天
            </summary>
            <param name="dt1">时间1</param>
            <param name="dt2">时间2</param>
            <param name="timeType">时间差</param>
            <returns>返回相差天数</returns>
        </member>
        <member name="M:System.TimeExpand.ToStr(System.DateTime,System.String)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间类型</param>
            <param name="format">格式</param>
            <returns>返回时间格式字符串</returns>
        </member>
        <member name="T:System.PinyinLib">
            <summary>
            拼音帮助类
            </summary>
        </member>
        <member name="M:System.PinyinLib.GetChineseSpellCode(System.String)">
            <summary>
            获取中文万国码
            </summary>
            <param name="unicodeStr">unicode编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.PinyinLib.PinyinFirst(System.String)">
            <summary>
            从字符串中获取汉字拼音首字母，不是汉字则原样输出
            </summary>
            <param name="str">字符串</param>
            <returns>返回拼音首字母</returns>
        </member>
        <member name="M:System.PinyinLib.Pinyin(System.String)">
            <summary>汉字转换成全拼的拼音</summary>
            <param name="str">汉字字符串</param>
            <returns>返回拼音</returns> 
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonExpand">
            <summary>
            Json拓展函数
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonExpand.ToDecimal(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转为decimal类型
            </summary>
            <param name="jtk">科学记数法JToken</param>
            <returns>返回decimal类型</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonExpand.ChangeJArr(System.Object)">
            <summary>
            改变jarr里面的科学记数法为Decimal值
            </summary>
            <param name="jtk">原Json数组</param>
            <returns>返回改变后的Json数组</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonExpand.ToLong(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转为decimal类型
            </summary>
            <param name="jtk">科学记数法JToken</param>
            <returns>返回decimal类型</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonExpand.UrlToJson(System.String,System.Boolean)">
            <summary>
            URL参数转Json对象
            </summary>
            <param name="urlQuery">URL参数字符串</param>
            <param name="toLower">是否转为小写</param>
            <returns>返回json对象</returns>
        </member>
    </members>
</doc>
